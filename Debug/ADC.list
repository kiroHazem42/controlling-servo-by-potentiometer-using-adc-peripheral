
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800445c  0800445c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800445c  0800445c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800445c  0800445c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004460  08004460  00014460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000090  080044f4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080044f4  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0b6  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b8c  00000000  00000000  0002a16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002bd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002c848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018999  00000000  00000000  0002d298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd1a  00000000  00000000  00045c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d9b2  00000000  00000000  0005294b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e02fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ac  00000000  00000000  000e0350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	080043b8 	.word	0x080043b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	080043b8 	.word	0x080043b8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ae:	2afd      	cmp	r2, #253	; 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	; 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_drsub>:
 80002c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c8:	e002      	b.n	80002d0 <__adddf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_dsub>:
 80002cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d0 <__adddf3>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002da:	ea94 0f05 	teq	r4, r5
 80002de:	bf08      	it	eq
 80002e0:	ea90 0f02 	teqeq	r0, r2
 80002e4:	bf1f      	itttt	ne
 80002e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f6:	f000 80e2 	beq.w	80004be <__adddf3+0x1ee>
 80002fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000302:	bfb8      	it	lt
 8000304:	426d      	neglt	r5, r5
 8000306:	dd0c      	ble.n	8000322 <__adddf3+0x52>
 8000308:	442c      	add	r4, r5
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	ea82 0000 	eor.w	r0, r2, r0
 8000316:	ea83 0101 	eor.w	r1, r3, r1
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	2d36      	cmp	r5, #54	; 0x36
 8000324:	bf88      	it	hi
 8000326:	bd30      	pophi	{r4, r5, pc}
 8000328:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000330:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x70>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x84>
 800034e:	4252      	negs	r2, r2
 8000350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000354:	ea94 0f05 	teq	r4, r5
 8000358:	f000 80a7 	beq.w	80004aa <__adddf3+0x1da>
 800035c:	f1a4 0401 	sub.w	r4, r4, #1
 8000360:	f1d5 0e20 	rsbs	lr, r5, #32
 8000364:	db0d      	blt.n	8000382 <__adddf3+0xb2>
 8000366:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036a:	fa22 f205 	lsr.w	r2, r2, r5
 800036e:	1880      	adds	r0, r0, r2
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	fa03 f20e 	lsl.w	r2, r3, lr
 8000378:	1880      	adds	r0, r0, r2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	4159      	adcs	r1, r3
 8000380:	e00e      	b.n	80003a0 <__adddf3+0xd0>
 8000382:	f1a5 0520 	sub.w	r5, r5, #32
 8000386:	f10e 0e20 	add.w	lr, lr, #32
 800038a:	2a01      	cmp	r2, #1
 800038c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000390:	bf28      	it	cs
 8000392:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	18c0      	adds	r0, r0, r3
 800039c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a4:	d507      	bpl.n	80003b6 <__adddf3+0xe6>
 80003a6:	f04f 0e00 	mov.w	lr, #0
 80003aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ba:	d31b      	bcc.n	80003f4 <__adddf3+0x124>
 80003bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c0:	d30c      	bcc.n	80003dc <__adddf3+0x10c>
 80003c2:	0849      	lsrs	r1, r1, #1
 80003c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003cc:	f104 0401 	add.w	r4, r4, #1
 80003d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d8:	f080 809a 	bcs.w	8000510 <__adddf3+0x240>
 80003dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e0:	bf08      	it	eq
 80003e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e6:	f150 0000 	adcs.w	r0, r0, #0
 80003ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ee:	ea41 0105 	orr.w	r1, r1, r5
 80003f2:	bd30      	pop	{r4, r5, pc}
 80003f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f8:	4140      	adcs	r0, r0
 80003fa:	eb41 0101 	adc.w	r1, r1, r1
 80003fe:	3c01      	subs	r4, #1
 8000400:	bf28      	it	cs
 8000402:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000406:	d2e9      	bcs.n	80003dc <__adddf3+0x10c>
 8000408:	f091 0f00 	teq	r1, #0
 800040c:	bf04      	itt	eq
 800040e:	4601      	moveq	r1, r0
 8000410:	2000      	moveq	r0, #0
 8000412:	fab1 f381 	clz	r3, r1
 8000416:	bf08      	it	eq
 8000418:	3320      	addeq	r3, #32
 800041a:	f1a3 030b 	sub.w	r3, r3, #11
 800041e:	f1b3 0220 	subs.w	r2, r3, #32
 8000422:	da0c      	bge.n	800043e <__adddf3+0x16e>
 8000424:	320c      	adds	r2, #12
 8000426:	dd08      	ble.n	800043a <__adddf3+0x16a>
 8000428:	f102 0c14 	add.w	ip, r2, #20
 800042c:	f1c2 020c 	rsb	r2, r2, #12
 8000430:	fa01 f00c 	lsl.w	r0, r1, ip
 8000434:	fa21 f102 	lsr.w	r1, r1, r2
 8000438:	e00c      	b.n	8000454 <__adddf3+0x184>
 800043a:	f102 0214 	add.w	r2, r2, #20
 800043e:	bfd8      	it	le
 8000440:	f1c2 0c20 	rsble	ip, r2, #32
 8000444:	fa01 f102 	lsl.w	r1, r1, r2
 8000448:	fa20 fc0c 	lsr.w	ip, r0, ip
 800044c:	bfdc      	itt	le
 800044e:	ea41 010c 	orrle.w	r1, r1, ip
 8000452:	4090      	lslle	r0, r2
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	bfa2      	ittt	ge
 8000458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800045c:	4329      	orrge	r1, r5
 800045e:	bd30      	popge	{r4, r5, pc}
 8000460:	ea6f 0404 	mvn.w	r4, r4
 8000464:	3c1f      	subs	r4, #31
 8000466:	da1c      	bge.n	80004a2 <__adddf3+0x1d2>
 8000468:	340c      	adds	r4, #12
 800046a:	dc0e      	bgt.n	800048a <__adddf3+0x1ba>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0220 	rsb	r2, r4, #32
 8000474:	fa20 f004 	lsr.w	r0, r0, r4
 8000478:	fa01 f302 	lsl.w	r3, r1, r2
 800047c:	ea40 0003 	orr.w	r0, r0, r3
 8000480:	fa21 f304 	lsr.w	r3, r1, r4
 8000484:	ea45 0103 	orr.w	r1, r5, r3
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f1c4 040c 	rsb	r4, r4, #12
 800048e:	f1c4 0220 	rsb	r2, r4, #32
 8000492:	fa20 f002 	lsr.w	r0, r0, r2
 8000496:	fa01 f304 	lsl.w	r3, r1, r4
 800049a:	ea40 0003 	orr.w	r0, r0, r3
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	fa21 f004 	lsr.w	r0, r1, r4
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f094 0f00 	teq	r4, #0
 80004ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b2:	bf06      	itte	eq
 80004b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b8:	3401      	addeq	r4, #1
 80004ba:	3d01      	subne	r5, #1
 80004bc:	e74e      	b.n	800035c <__adddf3+0x8c>
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf18      	it	ne
 80004c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c8:	d029      	beq.n	800051e <__adddf3+0x24e>
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	d005      	beq.n	80004e2 <__adddf3+0x212>
 80004d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004da:	bf04      	itt	eq
 80004dc:	4619      	moveq	r1, r3
 80004de:	4610      	moveq	r0, r2
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea91 0f03 	teq	r1, r3
 80004e6:	bf1e      	ittt	ne
 80004e8:	2100      	movne	r1, #0
 80004ea:	2000      	movne	r0, #0
 80004ec:	bd30      	popne	{r4, r5, pc}
 80004ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f2:	d105      	bne.n	8000500 <__adddf3+0x230>
 80004f4:	0040      	lsls	r0, r0, #1
 80004f6:	4149      	adcs	r1, r1
 80004f8:	bf28      	it	cs
 80004fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000504:	bf3c      	itt	cc
 8000506:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050a:	bd30      	popcc	{r4, r5, pc}
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000510:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000522:	bf1a      	itte	ne
 8000524:	4619      	movne	r1, r3
 8000526:	4610      	movne	r0, r2
 8000528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800052c:	bf1c      	itt	ne
 800052e:	460b      	movne	r3, r1
 8000530:	4602      	movne	r2, r0
 8000532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000536:	bf06      	itte	eq
 8000538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800053c:	ea91 0f03 	teqeq	r1, r3
 8000540:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	bf00      	nop

08000548 <__aeabi_ui2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f04f 0500 	mov.w	r5, #0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e750      	b.n	8000408 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_i2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000580:	bf48      	it	mi
 8000582:	4240      	negmi	r0, r0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e73e      	b.n	8000408 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_f2d>:
 800058c:	0042      	lsls	r2, r0, #1
 800058e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000592:	ea4f 0131 	mov.w	r1, r1, rrx
 8000596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059a:	bf1f      	itttt	ne
 800059c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a8:	4770      	bxne	lr
 80005aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ae:	bf08      	it	eq
 80005b0:	4770      	bxeq	lr
 80005b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b6:	bf04      	itt	eq
 80005b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005cc:	e71c      	b.n	8000408 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aed8 	beq.w	80003b6 <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6bd      	b.n	80003b6 <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_dmul>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000642:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064a:	bf1d      	ittte	ne
 800064c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000650:	ea94 0f0c 	teqne	r4, ip
 8000654:	ea95 0f0c 	teqne	r5, ip
 8000658:	f000 f8de 	bleq	8000818 <__aeabi_dmul+0x1dc>
 800065c:	442c      	add	r4, r5
 800065e:	ea81 0603 	eor.w	r6, r1, r3
 8000662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066e:	bf18      	it	ne
 8000670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067c:	d038      	beq.n	80006f0 <__aeabi_dmul+0xb4>
 800067e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000682:	f04f 0500 	mov.w	r5, #0
 8000686:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000692:	f04f 0600 	mov.w	r6, #0
 8000696:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069a:	f09c 0f00 	teq	ip, #0
 800069e:	bf18      	it	ne
 80006a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b0:	d204      	bcs.n	80006bc <__aeabi_dmul+0x80>
 80006b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b6:	416d      	adcs	r5, r5
 80006b8:	eb46 0606 	adc.w	r6, r6, r6
 80006bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d4:	bf88      	it	hi
 80006d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006da:	d81e      	bhi.n	800071a <__aeabi_dmul+0xde>
 80006dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f4:	ea46 0101 	orr.w	r1, r6, r1
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000704:	bfc2      	ittt	gt
 8000706:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070e:	bd70      	popgt	{r4, r5, r6, pc}
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f04f 0e00 	mov.w	lr, #0
 8000718:	3c01      	subs	r4, #1
 800071a:	f300 80ab 	bgt.w	8000874 <__aeabi_dmul+0x238>
 800071e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000722:	bfde      	ittt	le
 8000724:	2000      	movle	r0, #0
 8000726:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072a:	bd70      	pople	{r4, r5, r6, pc}
 800072c:	f1c4 0400 	rsb	r4, r4, #0
 8000730:	3c20      	subs	r4, #32
 8000732:	da35      	bge.n	80007a0 <__aeabi_dmul+0x164>
 8000734:	340c      	adds	r4, #12
 8000736:	dc1b      	bgt.n	8000770 <__aeabi_dmul+0x134>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f305 	lsl.w	r3, r0, r5
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	fa21 f604 	lsr.w	r6, r1, r4
 8000760:	eb42 0106 	adc.w	r1, r2, r6
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 040c 	rsb	r4, r4, #12
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f304 	lsl.w	r3, r0, r4
 800077c:	fa20 f005 	lsr.w	r0, r0, r5
 8000780:	fa01 f204 	lsl.w	r2, r1, r4
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	f141 0100 	adc.w	r1, r1, #0
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f205 	lsl.w	r2, r0, r5
 80007a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ac:	fa20 f304 	lsr.w	r3, r0, r4
 80007b0:	fa01 f205 	lsl.w	r2, r1, r5
 80007b4:	ea43 0302 	orr.w	r3, r3, r2
 80007b8:	fa21 f004 	lsr.w	r0, r1, r4
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	fa21 f204 	lsr.w	r2, r1, r4
 80007c4:	ea20 0002 	bic.w	r0, r0, r2
 80007c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f094 0f00 	teq	r4, #0
 80007dc:	d10f      	bne.n	80007fe <__aeabi_dmul+0x1c2>
 80007de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e2:	0040      	lsls	r0, r0, #1
 80007e4:	eb41 0101 	adc.w	r1, r1, r1
 80007e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3c01      	subeq	r4, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1a6>
 80007f2:	ea41 0106 	orr.w	r1, r1, r6
 80007f6:	f095 0f00 	teq	r5, #0
 80007fa:	bf18      	it	ne
 80007fc:	4770      	bxne	lr
 80007fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	eb43 0303 	adc.w	r3, r3, r3
 8000808:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3d01      	subeq	r5, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1c6>
 8000812:	ea43 0306 	orr.w	r3, r3, r6
 8000816:	4770      	bx	lr
 8000818:	ea94 0f0c 	teq	r4, ip
 800081c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000820:	bf18      	it	ne
 8000822:	ea95 0f0c 	teqne	r5, ip
 8000826:	d00c      	beq.n	8000842 <__aeabi_dmul+0x206>
 8000828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082c:	bf18      	it	ne
 800082e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000832:	d1d1      	bne.n	80007d8 <__aeabi_dmul+0x19c>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000846:	bf06      	itte	eq
 8000848:	4610      	moveq	r0, r2
 800084a:	4619      	moveq	r1, r3
 800084c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000850:	d019      	beq.n	8000886 <__aeabi_dmul+0x24a>
 8000852:	ea94 0f0c 	teq	r4, ip
 8000856:	d102      	bne.n	800085e <__aeabi_dmul+0x222>
 8000858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800085c:	d113      	bne.n	8000886 <__aeabi_dmul+0x24a>
 800085e:	ea95 0f0c 	teq	r5, ip
 8000862:	d105      	bne.n	8000870 <__aeabi_dmul+0x234>
 8000864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000868:	bf1c      	itt	ne
 800086a:	4610      	movne	r0, r2
 800086c:	4619      	movne	r1, r3
 800086e:	d10a      	bne.n	8000886 <__aeabi_dmul+0x24a>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088e:	bd70      	pop	{r4, r5, r6, pc}

08000890 <__aeabi_ddiv>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089e:	bf1d      	ittte	ne
 80008a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a4:	ea94 0f0c 	teqne	r4, ip
 80008a8:	ea95 0f0c 	teqne	r5, ip
 80008ac:	f000 f8a7 	bleq	80009fe <__aeabi_ddiv+0x16e>
 80008b0:	eba4 0405 	sub.w	r4, r4, r5
 80008b4:	ea81 0e03 	eor.w	lr, r1, r3
 80008b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c0:	f000 8088 	beq.w	80009d4 <__aeabi_ddiv+0x144>
 80008c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e8:	429d      	cmp	r5, r3
 80008ea:	bf08      	it	eq
 80008ec:	4296      	cmpeq	r6, r2
 80008ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f6:	d202      	bcs.n	80008fe <__aeabi_ddiv+0x6e>
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	1ab6      	subs	r6, r6, r2
 8000900:	eb65 0503 	sbc.w	r5, r5, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 000c 	orrcs.w	r0, r0, ip
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000970:	d018      	beq.n	80009a4 <__aeabi_ddiv+0x114>
 8000972:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098e:	d1c0      	bne.n	8000912 <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	d10b      	bne.n	80009ae <__aeabi_ddiv+0x11e>
 8000996:	ea41 0100 	orr.w	r1, r1, r0
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a2:	e7b6      	b.n	8000912 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	bf04      	itt	eq
 80009aa:	4301      	orreq	r1, r0
 80009ac:	2000      	moveq	r0, #0
 80009ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b2:	bf88      	it	hi
 80009b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b8:	f63f aeaf 	bhi.w	800071a <__aeabi_dmul+0xde>
 80009bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c0:	bf04      	itt	eq
 80009c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ca:	f150 0000 	adcs.w	r0, r0, #0
 80009ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	e690      	b.n	800071a <__aeabi_dmul+0xde>
 80009f8:	ea45 0e06 	orr.w	lr, r5, r6
 80009fc:	e68d      	b.n	800071a <__aeabi_dmul+0xde>
 80009fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	bf08      	it	eq
 8000a08:	ea95 0f0c 	teqeq	r5, ip
 8000a0c:	f43f af3b 	beq.w	8000886 <__aeabi_dmul+0x24a>
 8000a10:	ea94 0f0c 	teq	r4, ip
 8000a14:	d10a      	bne.n	8000a2c <__aeabi_ddiv+0x19c>
 8000a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1a:	f47f af34 	bne.w	8000886 <__aeabi_dmul+0x24a>
 8000a1e:	ea95 0f0c 	teq	r5, ip
 8000a22:	f47f af25 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e72c      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a2c:	ea95 0f0c 	teq	r5, ip
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x1b0>
 8000a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a36:	f43f aefd 	beq.w	8000834 <__aeabi_dmul+0x1f8>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e722      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a44:	bf18      	it	ne
 8000a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4a:	f47f aec5 	bne.w	80007d8 <__aeabi_dmul+0x19c>
 8000a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a52:	f47f af0d 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5a:	f47f aeeb 	bne.w	8000834 <__aeabi_dmul+0x1f8>
 8000a5e:	e712      	b.n	8000886 <__aeabi_dmul+0x24a>

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_frsub>:
 8000b00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b04:	e002      	b.n	8000b0c <__addsf3>
 8000b06:	bf00      	nop

08000b08 <__aeabi_fsub>:
 8000b08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b0c <__addsf3>:
 8000b0c:	0042      	lsls	r2, r0, #1
 8000b0e:	bf1f      	itttt	ne
 8000b10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b14:	ea92 0f03 	teqne	r2, r3
 8000b18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b20:	d06a      	beq.n	8000bf8 <__addsf3+0xec>
 8000b22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b2a:	bfc1      	itttt	gt
 8000b2c:	18d2      	addgt	r2, r2, r3
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	4048      	eorgt	r0, r1
 8000b32:	4041      	eorgt	r1, r0
 8000b34:	bfb8      	it	lt
 8000b36:	425b      	neglt	r3, r3
 8000b38:	2b19      	cmp	r3, #25
 8000b3a:	bf88      	it	hi
 8000b3c:	4770      	bxhi	lr
 8000b3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b5a:	bf18      	it	ne
 8000b5c:	4249      	negne	r1, r1
 8000b5e:	ea92 0f03 	teq	r2, r3
 8000b62:	d03f      	beq.n	8000be4 <__addsf3+0xd8>
 8000b64:	f1a2 0201 	sub.w	r2, r2, #1
 8000b68:	fa41 fc03 	asr.w	ip, r1, r3
 8000b6c:	eb10 000c 	adds.w	r0, r0, ip
 8000b70:	f1c3 0320 	rsb	r3, r3, #32
 8000b74:	fa01 f103 	lsl.w	r1, r1, r3
 8000b78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b7c:	d502      	bpl.n	8000b84 <__addsf3+0x78>
 8000b7e:	4249      	negs	r1, r1
 8000b80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b88:	d313      	bcc.n	8000bb2 <__addsf3+0xa6>
 8000b8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8e:	d306      	bcc.n	8000b9e <__addsf3+0x92>
 8000b90:	0840      	lsrs	r0, r0, #1
 8000b92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b96:	f102 0201 	add.w	r2, r2, #1
 8000b9a:	2afe      	cmp	r2, #254	; 0xfe
 8000b9c:	d251      	bcs.n	8000c42 <__addsf3+0x136>
 8000b9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	ea40 0003 	orr.w	r0, r0, r3
 8000bb0:	4770      	bx	lr
 8000bb2:	0049      	lsls	r1, r1, #1
 8000bb4:	eb40 0000 	adc.w	r0, r0, r0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc0:	d2ed      	bcs.n	8000b9e <__addsf3+0x92>
 8000bc2:	fab0 fc80 	clz	ip, r0
 8000bc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bca:	ebb2 020c 	subs.w	r2, r2, ip
 8000bce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bd2:	bfaa      	itet	ge
 8000bd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd8:	4252      	neglt	r2, r2
 8000bda:	4318      	orrge	r0, r3
 8000bdc:	bfbc      	itt	lt
 8000bde:	40d0      	lsrlt	r0, r2
 8000be0:	4318      	orrlt	r0, r3
 8000be2:	4770      	bx	lr
 8000be4:	f092 0f00 	teq	r2, #0
 8000be8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bec:	bf06      	itte	eq
 8000bee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bf2:	3201      	addeq	r2, #1
 8000bf4:	3b01      	subne	r3, #1
 8000bf6:	e7b5      	b.n	8000b64 <__addsf3+0x58>
 8000bf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c00:	bf18      	it	ne
 8000c02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c06:	d021      	beq.n	8000c4c <__addsf3+0x140>
 8000c08:	ea92 0f03 	teq	r2, r3
 8000c0c:	d004      	beq.n	8000c18 <__addsf3+0x10c>
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	bf08      	it	eq
 8000c14:	4608      	moveq	r0, r1
 8000c16:	4770      	bx	lr
 8000c18:	ea90 0f01 	teq	r0, r1
 8000c1c:	bf1c      	itt	ne
 8000c1e:	2000      	movne	r0, #0
 8000c20:	4770      	bxne	lr
 8000c22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c26:	d104      	bne.n	8000c32 <__addsf3+0x126>
 8000c28:	0040      	lsls	r0, r0, #1
 8000c2a:	bf28      	it	cs
 8000c2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c30:	4770      	bx	lr
 8000c32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c36:	bf3c      	itt	cc
 8000c38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bxcc	lr
 8000c3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4a:	4770      	bx	lr
 8000c4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c50:	bf16      	itet	ne
 8000c52:	4608      	movne	r0, r1
 8000c54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c58:	4601      	movne	r1, r0
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	bf06      	itte	eq
 8000c5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c62:	ea90 0f01 	teqeq	r0, r1
 8000c66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_ui2f>:
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e004      	b.n	8000c7c <__aeabi_i2f+0x8>
 8000c72:	bf00      	nop

08000c74 <__aeabi_i2f>:
 8000c74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c78:	bf48      	it	mi
 8000c7a:	4240      	negmi	r0, r0
 8000c7c:	ea5f 0c00 	movs.w	ip, r0
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c88:	4601      	mov	r1, r0
 8000c8a:	f04f 0000 	mov.w	r0, #0
 8000c8e:	e01c      	b.n	8000cca <__aeabi_l2f+0x2a>

08000c90 <__aeabi_ul2f>:
 8000c90:	ea50 0201 	orrs.w	r2, r0, r1
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e00a      	b.n	8000cb4 <__aeabi_l2f+0x14>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_l2f>:
 8000ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__aeabi_l2f+0x14>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	ea5f 0c01 	movs.w	ip, r1
 8000cb8:	bf02      	ittt	eq
 8000cba:	4684      	moveq	ip, r0
 8000cbc:	4601      	moveq	r1, r0
 8000cbe:	2000      	moveq	r0, #0
 8000cc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc4:	bf08      	it	eq
 8000cc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cce:	fabc f28c 	clz	r2, ip
 8000cd2:	3a08      	subs	r2, #8
 8000cd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd8:	db10      	blt.n	8000cfc <__aeabi_l2f+0x5c>
 8000cda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cde:	4463      	add	r3, ip
 8000ce0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce4:	f1c2 0220 	rsb	r2, r2, #32
 8000ce8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	eb43 0002 	adc.w	r0, r3, r2
 8000cf4:	bf08      	it	eq
 8000cf6:	f020 0001 	biceq.w	r0, r0, #1
 8000cfa:	4770      	bx	lr
 8000cfc:	f102 0220 	add.w	r2, r2, #32
 8000d00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_f2uiz>:
 8000d1c:	0042      	lsls	r2, r0, #1
 8000d1e:	d20e      	bcs.n	8000d3e <__aeabi_f2uiz+0x22>
 8000d20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d24:	d30b      	bcc.n	8000d3e <__aeabi_f2uiz+0x22>
 8000d26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d2e:	d409      	bmi.n	8000d44 <__aeabi_f2uiz+0x28>
 8000d30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d38:	fa23 f002 	lsr.w	r0, r3, r2
 8000d3c:	4770      	bx	lr
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	4770      	bx	lr
 8000d44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d48:	d101      	bne.n	8000d4e <__aeabi_f2uiz+0x32>
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	d102      	bne.n	8000d54 <__aeabi_f2uiz+0x38>
 8000d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d52:	4770      	bx	lr
 8000d54:	f04f 0000 	mov.w	r0, #0
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d62:	f000 fb5f 	bl	8001424 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d66:	f000 f883 	bl	8000e70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d6a:	f000 f99f 	bl	80010ac <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d6e:	f000 f8db 	bl	8000f28 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000d72:	f000 f917 	bl	8000fa4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	///////lcd config***************
	Alcd_Init(&lcd1, 2, 0); //start disply
 8000d76:	2200      	movs	r2, #0
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4834      	ldr	r0, [pc, #208]	; (8000e4c <main+0xf0>)
 8000d7c:	f002 fd48 	bl	8003810 <Alcd_Init>
	// Alcd_PutAt(&lcd1,1,0,"HAzEM");
	Alcd_PutAt_n(&lcd1, 0, 0, "init", 4);
 8000d80:	2304      	movs	r3, #4
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <main+0xf4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4830      	ldr	r0, [pc, #192]	; (8000e4c <main+0xf0>)
 8000d8c:	f002 fdfb 	bl	8003986 <Alcd_PutAt_n>
	//Alcd_Clear(&lcd1);
	HAL_Delay(1000 );
 8000d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d94:	f000 fba8 	bl	80014e8 <HAL_Delay>
	// Alcd_Clear(&lcd1);
	///////adc config***************

	//uint16_t result=HAL_ADC_GetValue(&hadc1);
	//timer and servo**************
	HAL_ADC_Start(&hadc1);
 8000d98:	482e      	ldr	r0, [pc, #184]	; (8000e54 <main+0xf8>)
 8000d9a:	f000 fca1 	bl	80016e0 <HAL_ADC_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // For output to the servo
 8000d9e:	2100      	movs	r1, #0
 8000da0:	482d      	ldr	r0, [pc, #180]	; (8000e58 <main+0xfc>)
 8000da2:	f002 f829 	bl	8002df8 <HAL_TIM_PWM_Start>
Alcd_Clear(&lcd1);
 8000da6:	4829      	ldr	r0, [pc, #164]	; (8000e4c <main+0xf0>)
 8000da8:	f002 fe06 	bl	80039b8 <Alcd_Clear>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500); // Set a duty cycle for the servo
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <main+0xfc>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000db6:	2164      	movs	r1, #100	; 0x64
 8000db8:	4826      	ldr	r0, [pc, #152]	; (8000e54 <main+0xf8>)
 8000dba:	f000 fd3f 	bl	800183c <HAL_ADC_PollForConversion>

	uint32_t pot_counter = HAL_ADC_GetValue(&hadc1); // Get the counter of the encoder
 8000dbe:	4825      	ldr	r0, [pc, #148]	; (8000e54 <main+0xf8>)
 8000dc0:	f000 fe42 	bl	8001a48 <HAL_ADC_GetValue>
 8000dc4:	60f8      	str	r0, [r7, #12]
	float degrees = (pot_counter / 22.75);
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f7ff fbbe 	bl	8000548 <__aeabi_ui2d>
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <main+0x100>)
 8000dd2:	f7ff fd5d 	bl	8000890 <__aeabi_ddiv>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fe3f 	bl	8000a60 <__aeabi_d2f>
 8000de2:	4603      	mov	r3, r0
 8000de4:	60bb      	str	r3, [r7, #8]
	 if (degrees > 90) {
	 degrees = 90;
	 } //make sure that it doesn't exceed the limit of degrees i choosed*/


	uint32_t pwm_val = degree_pwm(degrees); // Convert degrees to PWM value
 8000de6:	68b8      	ldr	r0, [r7, #8]
 8000de8:	f000 f982 	bl	80010f0 <degree_pwm>
 8000dec:	6078      	str	r0, [r7, #4]
	HAL_Delay(500);
 8000dee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df2:	f000 fb79 	bl	80014e8 <HAL_Delay>
	 pwm_val = 1999;
	 }*/
/*sprintf(str, "%d", pot_counter);
Alcd_PutAt_n(&lcd1, 0, 0, str, strlen(str));*/

	sprintf(str1, "deg%d", degrees);
 8000df6:	68b8      	ldr	r0, [r7, #8]
 8000df8:	f7ff fbc8 	bl	800058c <__aeabi_f2d>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4917      	ldr	r1, [pc, #92]	; (8000e60 <main+0x104>)
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <main+0x108>)
 8000e04:	f002 fe5e 	bl	8003ac4 <siprintf>
	Alcd_PutAt_n(&lcd1, 0, 0, str1, strlen(str1));
 8000e08:	4816      	ldr	r0, [pc, #88]	; (8000e64 <main+0x108>)
 8000e0a:	f7ff f99f 	bl	800014c <strlen>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <main+0x108>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	480c      	ldr	r0, [pc, #48]	; (8000e4c <main+0xf0>)
 8000e1c:	f002 fdb3 	bl	8003986 <Alcd_PutAt_n>

	sprintf(str2, "PWM%d", pwm_val);
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	4911      	ldr	r1, [pc, #68]	; (8000e68 <main+0x10c>)
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <main+0x110>)
 8000e26:	f002 fe4d 	bl	8003ac4 <siprintf>
	Alcd_PutAt_n(&lcd1, 1, 0, str2, strlen(str2));
 8000e2a:	4810      	ldr	r0, [pc, #64]	; (8000e6c <main+0x110>)
 8000e2c:	f7ff f98e 	bl	800014c <strlen>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <main+0x110>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <main+0xf0>)
 8000e3e:	f002 fda2 	bl	8003986 <Alcd_PutAt_n>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val); // Set PWM value for servo
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <main+0xfc>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
	{
 8000e4a:	e7b4      	b.n	8000db6 <main+0x5a>
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	080043d0 	.word	0x080043d0
 8000e54:	200000ac 	.word	0x200000ac
 8000e58:	200000dc 	.word	0x200000dc
 8000e5c:	4036c000 	.word	0x4036c000
 8000e60:	080043d8 	.word	0x080043d8
 8000e64:	20000124 	.word	0x20000124
 8000e68:	080043e0 	.word	0x080043e0
 8000e6c:	20000138 	.word	0x20000138

08000e70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b094      	sub	sp, #80	; 0x50
 8000e74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7a:	2228      	movs	r2, #40	; 0x28
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 fe18 	bl	8003ab4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ebc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 f9de 	bl	8002288 <HAL_RCC_OscConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x66>
		Error_Handler();
 8000ed2:	f000 f927 	bl	8001124 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fc4a 	bl	800278c <HAL_RCC_ClockConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x92>
		Error_Handler();
 8000efe:	f000 f911 	bl	8001124 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f02:	2302      	movs	r3, #2
 8000f04:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f0a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fdb6 	bl	8002a80 <HAL_RCCEx_PeriphCLKConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0xae>
		Error_Handler();
 8000f1a:	f000 f903 	bl	8001124 <Error_Handler>
	}
}
 8000f1e:	bf00      	nop
 8000f20:	3750      	adds	r7, #80	; 0x50
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_ADC1_Init+0x74>)
 8000f3a:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <MX_ADC1_Init+0x78>)
 8000f3c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_ADC1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_ADC1_Init+0x74>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_ADC1_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_ADC1_Init+0x74>)
 8000f52:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f56:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_ADC1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_ADC1_Init+0x74>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_ADC1_Init+0x74>)
 8000f66:	f000 fae3 	bl	8001530 <HAL_ADC_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000f70:	f000 f8d8 	bl	8001124 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_ADC1_Init+0x74>)
 8000f86:	f000 fd6b 	bl	8001a60 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000f90:	f000 f8c8 	bl	8001124 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200000ac 	.word	0x200000ac
 8000fa0:	40012400 	.word	0x40012400

08000fa4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b092      	sub	sp, #72	; 0x48
 8000fa8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000faa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2220      	movs	r2, #32
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fd70 	bl	8003ab4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000fd4:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <MX_TIM1_Init+0x100>)
 8000fd6:	4a34      	ldr	r2, [pc, #208]	; (80010a8 <MX_TIM1_Init+0x104>)
 8000fd8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72;
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <MX_TIM1_Init+0x100>)
 8000fdc:	2248      	movs	r2, #72	; 0x48
 8000fde:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <MX_TIM1_Init+0x100>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <MX_TIM1_Init+0x100>)
 8000fe8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000fec:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <MX_TIM1_Init+0x100>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_TIM1_Init+0x100>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <MX_TIM1_Init+0x100>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001000:	4828      	ldr	r0, [pc, #160]	; (80010a4 <MX_TIM1_Init+0x100>)
 8001002:	f001 fea9 	bl	8002d58 <HAL_TIM_PWM_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0x6c>
		Error_Handler();
 800100c:	f000 f88a 	bl	8001124 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800101c:	4619      	mov	r1, r3
 800101e:	4821      	ldr	r0, [pc, #132]	; (80010a4 <MX_TIM1_Init+0x100>)
 8001020:	f002 fa5c 	bl	80034dc <HAL_TIMEx_MasterConfigSynchronization>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800102a:	f000 f87b 	bl	8001124 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102e:	2360      	movs	r3, #96	; 0x60
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800103a:	2300      	movs	r3, #0
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	2200      	movs	r2, #0
 8001050:	4619      	mov	r1, r3
 8001052:	4814      	ldr	r0, [pc, #80]	; (80010a4 <MX_TIM1_Init+0x100>)
 8001054:	f001 ff72 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 800105e:	f000 f861 	bl	8001124 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_TIM1_Init+0x100>)
 8001086:	f002 fa87 	bl	8003598 <HAL_TIMEx_ConfigBreakDeadTime>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8001090:	f000 f848 	bl	8001124 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MX_TIM1_Init+0x100>)
 8001096:	f000 f8d7 	bl	8001248 <HAL_TIM_MspPostInit>

}
 800109a:	bf00      	nop
 800109c:	3748      	adds	r7, #72	; 0x48
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000dc 	.word	0x200000dc
 80010a8:	40012c00 	.word	0x40012c00

080010ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_GPIO_Init+0x40>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <MX_GPIO_Init+0x40>)
 80010b8:	f043 0320 	orr.w	r3, r3, #32
 80010bc:	6193      	str	r3, [r2, #24]
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_GPIO_Init+0x40>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f003 0320 	and.w	r3, r3, #32
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_GPIO_Init+0x40>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <MX_GPIO_Init+0x40>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <MX_GPIO_Init+0x40>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	40021000 	.word	0x40021000

080010f0 <degree_pwm>:

/* USER CODE BEGIN 4 */
uint32_t degree_pwm(float degree_value) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	return  ((degree_value * (1000 / 180)) + 999);
 80010f8:	4908      	ldr	r1, [pc, #32]	; (800111c <degree_pwm+0x2c>)
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff f82e 	bl	800015c <__aeabi_fmul>
 8001100:	4603      	mov	r3, r0
 8001102:	4907      	ldr	r1, [pc, #28]	; (8001120 <degree_pwm+0x30>)
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fd01 	bl	8000b0c <__addsf3>
 800110a:	4603      	mov	r3, r0
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fe05 	bl	8000d1c <__aeabi_f2uiz>
 8001112:	4603      	mov	r3, r0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40a00000 	.word	0x40a00000
 8001120:	4479c000 	.word	0x4479c000

08001124 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800112c:	e7fe      	b.n	800112c <Error_Handler+0x8>
	...

08001130 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_MspInit+0x5c>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_MspInit+0x5c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_MspInit+0x5c>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_MspInit+0x5c>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_MspInit+0x5c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_MspInit+0x5c>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_MspInit+0x60>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_MspInit+0x60>)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000

08001194 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <HAL_ADC_MspInit+0x6c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d121      	bne.n	80011f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_ADC_MspInit+0x70>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a12      	ldr	r2, [pc, #72]	; (8001204 <HAL_ADC_MspInit+0x70>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_ADC_MspInit+0x70>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_ADC_MspInit+0x70>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <HAL_ADC_MspInit+0x70>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_ADC_MspInit+0x70>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011e4:	2302      	movs	r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e8:	2303      	movs	r3, #3
 80011ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_ADC_MspInit+0x74>)
 80011f4:	f000 feac 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40012400 	.word	0x40012400
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800

0800120c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <HAL_TIM_PWM_MspInit+0x34>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10b      	bne.n	8001236 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_TIM_PWM_MspInit+0x38>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_TIM_PWM_MspInit+0x38>)
 8001224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_TIM_PWM_MspInit+0x38>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40012c00 	.word	0x40012c00
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_TIM_MspPostInit+0x5c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d118      	bne.n	800129a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_TIM_MspPostInit+0x60>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_TIM_MspPostInit+0x60>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_TIM_MspPostInit+0x60>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001284:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2302      	movs	r3, #2
 800128c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_TIM_MspPostInit+0x64>)
 8001296:	f000 fe5b 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40012c00 	.word	0x40012c00
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010800 	.word	0x40010800

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f6:	f000 f8db 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f002 fb96 	bl	8003a60 <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20005000 	.word	0x20005000
 8001360:	00000400 	.word	0x00000400
 8001364:	2000014c 	.word	0x2000014c
 8001368:	20000168 	.word	0x20000168

0800136c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff fff8 	bl	800136c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800137e:	490c      	ldr	r1, [pc, #48]	; (80013b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001394:	4c09      	ldr	r4, [pc, #36]	; (80013bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f002 fb63 	bl	8003a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7ff fcd9 	bl	8000d5c <main>
  bx lr
 80013aa:	4770      	bx	lr
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80013b4:	08004464 	.word	0x08004464
  ldr r2, =_sbss
 80013b8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80013bc:	20000164 	.word	0x20000164

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <DWT_Delay_Init+0x58>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4a13      	ldr	r2, [pc, #76]	; (800141c <DWT_Delay_Init+0x58>)
 80013ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <DWT_Delay_Init+0x58>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	4a10      	ldr	r2, [pc, #64]	; (800141c <DWT_Delay_Init+0x58>)
 80013da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013de:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <DWT_Delay_Init+0x5c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <DWT_Delay_Init+0x5c>)
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <DWT_Delay_Init+0x5c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <DWT_Delay_Init+0x5c>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <DWT_Delay_Init+0x5c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80013fe:	bf00      	nop
     __ASM volatile ("NOP");
 8001400:	bf00      	nop
  __ASM volatile ("NOP");
 8001402:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <DWT_Delay_Init+0x5c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800140c:	2300      	movs	r3, #0
 800140e:	e000      	b.n	8001412 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001410:	2301      	movs	r3, #1
  }
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000edf0 	.word	0xe000edf0
 8001420:	e0001000 	.word	0xe0001000

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_Init+0x28>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_Init+0x28>)
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 fd57 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	200f      	movs	r0, #15
 800143c:	f000 f808 	bl	8001450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fe76 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40022000 	.word	0x40022000

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x54>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x58>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fd61 	bl	8001f36 <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f000 fd37 	bl	8001efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <HAL_InitTick+0x5c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000020 	.word	0x20000020
 80014a8:	20000028 	.word	0x20000028
 80014ac:	20000024 	.word	0x20000024

080014b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_IncTick+0x1c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_IncTick+0x20>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <HAL_IncTick+0x20>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	20000028 	.word	0x20000028
 80014d0:	20000150 	.word	0x20000150

080014d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b02      	ldr	r3, [pc, #8]	; (80014e4 <HAL_GetTick+0x10>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	20000150 	.word	0x20000150

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff fff0 	bl	80014d4 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffe0 	bl	80014d4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000028 	.word	0x20000028

08001530 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0be      	b.n	80016d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	2b00      	cmp	r3, #0
 800155e:	d109      	bne.n	8001574 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fe10 	bl	8001194 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fbc5 	bl	8001d04 <ADC_ConversionStop_Disable>
 800157a:	4603      	mov	r3, r0
 800157c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 8099 	bne.w	80016be <HAL_ADC_Init+0x18e>
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 8095 	bne.w	80016be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800159c:	f023 0302 	bic.w	r3, r3, #2
 80015a0:	f043 0202 	orr.w	r2, r3, #2
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7b1b      	ldrb	r3, [r3, #12]
 80015b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	4313      	orrs	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c8:	d003      	beq.n	80015d2 <HAL_ADC_Init+0xa2>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d102      	bne.n	80015d8 <HAL_ADC_Init+0xa8>
 80015d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d6:	e000      	b.n	80015da <HAL_ADC_Init+0xaa>
 80015d8:	2300      	movs	r3, #0
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7d1b      	ldrb	r3, [r3, #20]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d119      	bne.n	800161c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7b1b      	ldrb	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d109      	bne.n	8001604 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	035a      	lsls	r2, r3, #13
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	e00b      	b.n	800161c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	f043 0220 	orr.w	r2, r3, #32
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	f043 0201 	orr.w	r2, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	430a      	orrs	r2, r1
 800162e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <HAL_ADC_Init+0x1a8>)
 8001638:	4013      	ands	r3, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	430b      	orrs	r3, r1
 8001642:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800164c:	d003      	beq.n	8001656 <HAL_ADC_Init+0x126>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d104      	bne.n	8001660 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	3b01      	subs	r3, #1
 800165c:	051b      	lsls	r3, r3, #20
 800165e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	430a      	orrs	r2, r1
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_ADC_Init+0x1ac>)
 800167c:	4013      	ands	r3, r2
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	429a      	cmp	r2, r3
 8001682:	d10b      	bne.n	800169c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	f043 0201 	orr.w	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800169a:	e018      	b.n	80016ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f023 0312 	bic.w	r3, r3, #18
 80016a4:	f043 0210 	orr.w	r2, r3, #16
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	f043 0201 	orr.w	r2, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016bc:	e007      	b.n	80016ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	f043 0210 	orr.w	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	ffe1f7fd 	.word	0xffe1f7fd
 80016dc:	ff1f0efe 	.word	0xff1f0efe

080016e0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_ADC_Start+0x1a>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e098      	b.n	800182c <HAL_ADC_Start+0x14c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 faa4 	bl	8001c50 <ADC_Enable>
 8001708:	4603      	mov	r3, r0
 800170a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 8087 	bne.w	8001822 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a41      	ldr	r2, [pc, #260]	; (8001834 <HAL_ADC_Start+0x154>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d105      	bne.n	800173e <HAL_ADC_Start+0x5e>
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_ADC_Start+0x158>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d115      	bne.n	800176a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d026      	beq.n	80017a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001760:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001768:	e01d      	b.n	80017a6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <HAL_ADC_Start+0x158>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d004      	beq.n	800178a <HAL_ADC_Start+0xaa>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a2b      	ldr	r2, [pc, #172]	; (8001834 <HAL_ADC_Start+0x154>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10d      	bne.n	80017a6 <HAL_ADC_Start+0xc6>
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_ADC_Start+0x158>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800179e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f023 0206 	bic.w	r2, r3, #6
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017be:	e002      	b.n	80017c6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f06f 0202 	mvn.w	r2, #2
 80017d6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017e6:	d113      	bne.n	8001810 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017ec:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_ADC_Start+0x154>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d105      	bne.n	80017fe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_ADC_Start+0x158>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d108      	bne.n	8001810 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	e00c      	b.n	800182a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	e003      	b.n	800182a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40012800 	.word	0x40012800
 8001838:	40012400 	.word	0x40012400

0800183c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001852:	f7ff fe3f 	bl	80014d4 <HAL_GetTick>
 8001856:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	f043 0220 	orr.w	r2, r3, #32
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0d3      	b.n	8001a26 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d131      	bne.n	80018f0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001896:	2b00      	cmp	r3, #0
 8001898:	d12a      	bne.n	80018f0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800189a:	e021      	b.n	80018e0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a2:	d01d      	beq.n	80018e0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_ADC_PollForConversion+0x7e>
 80018aa:	f7ff fe13 	bl	80014d4 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d212      	bcs.n	80018e0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10b      	bne.n	80018e0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f043 0204 	orr.w	r2, r3, #4
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0a2      	b.n	8001a26 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0d6      	beq.n	800189c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018ee:	e070      	b.n	80019d2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80018f0:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <HAL_ADC_PollForConversion+0x1f4>)
 80018f2:	681c      	ldr	r4, [r3, #0]
 80018f4:	2002      	movs	r0, #2
 80018f6:	f001 f979 	bl	8002bec <HAL_RCCEx_GetPeriphCLKFreq>
 80018fa:	4603      	mov	r3, r0
 80018fc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6919      	ldr	r1, [r3, #16]
 8001906:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <HAL_ADC_PollForConversion+0x1f8>)
 8001908:	400b      	ands	r3, r1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_ADC_PollForConversion+0x104>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68d9      	ldr	r1, [r3, #12]
 8001914:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <HAL_ADC_PollForConversion+0x1fc>)
 8001916:	400b      	ands	r3, r1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d111      	bne.n	8001940 <HAL_ADC_PollForConversion+0x104>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6919      	ldr	r1, [r3, #16]
 8001922:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <HAL_ADC_PollForConversion+0x200>)
 8001924:	400b      	ands	r3, r1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d108      	bne.n	800193c <HAL_ADC_PollForConversion+0x100>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68d9      	ldr	r1, [r3, #12]
 8001930:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <HAL_ADC_PollForConversion+0x204>)
 8001932:	400b      	ands	r3, r1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_ADC_PollForConversion+0x100>
 8001938:	2314      	movs	r3, #20
 800193a:	e020      	b.n	800197e <HAL_ADC_PollForConversion+0x142>
 800193c:	2329      	movs	r3, #41	; 0x29
 800193e:	e01e      	b.n	800197e <HAL_ADC_PollForConversion+0x142>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6919      	ldr	r1, [r3, #16]
 8001946:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <HAL_ADC_PollForConversion+0x200>)
 8001948:	400b      	ands	r3, r1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_ADC_PollForConversion+0x120>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68d9      	ldr	r1, [r3, #12]
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <HAL_ADC_PollForConversion+0x204>)
 8001956:	400b      	ands	r3, r1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00d      	beq.n	8001978 <HAL_ADC_PollForConversion+0x13c>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6919      	ldr	r1, [r3, #16]
 8001962:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <HAL_ADC_PollForConversion+0x208>)
 8001964:	400b      	ands	r3, r1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d108      	bne.n	800197c <HAL_ADC_PollForConversion+0x140>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68d9      	ldr	r1, [r3, #12]
 8001970:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <HAL_ADC_PollForConversion+0x208>)
 8001972:	400b      	ands	r3, r1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_ADC_PollForConversion+0x140>
 8001978:	2354      	movs	r3, #84	; 0x54
 800197a:	e000      	b.n	800197e <HAL_ADC_PollForConversion+0x142>
 800197c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001984:	e021      	b.n	80019ca <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d01a      	beq.n	80019c4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_ADC_PollForConversion+0x168>
 8001994:	f7ff fd9e 	bl	80014d4 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d20f      	bcs.n	80019c4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d90b      	bls.n	80019c4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	f043 0204 	orr.w	r2, r3, #4
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e030      	b.n	8001a26 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d8d9      	bhi.n	8001986 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f06f 0212 	mvn.w	r2, #18
 80019da:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019f6:	d115      	bne.n	8001a24 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d111      	bne.n	8001a24 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd90      	pop	{r4, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000020 	.word	0x20000020
 8001a34:	24924924 	.word	0x24924924
 8001a38:	00924924 	.word	0x00924924
 8001a3c:	12492492 	.word	0x12492492
 8001a40:	00492492 	.word	0x00492492
 8001a44:	00249249 	.word	0x00249249

08001a48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x20>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e0dc      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x1da>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b06      	cmp	r3, #6
 8001a8e:	d81c      	bhi.n	8001aca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b05      	subs	r3, #5
 8001aa2:	221f      	movs	r2, #31
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4019      	ands	r1, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b05      	subs	r3, #5
 8001abc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ac8:	e03c      	b.n	8001b44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d81c      	bhi.n	8001b0c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3b23      	subs	r3, #35	; 0x23
 8001ae4:	221f      	movs	r2, #31
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	4019      	ands	r1, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3b23      	subs	r3, #35	; 0x23
 8001afe:	fa00 f203 	lsl.w	r2, r0, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
 8001b0a:	e01b      	b.n	8001b44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b41      	subs	r3, #65	; 0x41
 8001b1e:	221f      	movs	r2, #31
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	4019      	ands	r1, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	3b41      	subs	r3, #65	; 0x41
 8001b38:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b09      	cmp	r3, #9
 8001b4a:	d91c      	bls.n	8001b86 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68d9      	ldr	r1, [r3, #12]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b1e      	subs	r3, #30
 8001b5e:	2207      	movs	r2, #7
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4019      	ands	r1, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6898      	ldr	r0, [r3, #8]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	3b1e      	subs	r3, #30
 8001b78:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	e019      	b.n	8001bba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6919      	ldr	r1, [r3, #16]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	2207      	movs	r2, #7
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4019      	ands	r1, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6898      	ldr	r0, [r3, #8]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d003      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bc6:	2b11      	cmp	r3, #17
 8001bc8:	d132      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d125      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d126      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bf0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d11a      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	0c9a      	lsrs	r2, r3, #18
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c10:	e002      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f9      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x1b2>
 8001c1e:	e007      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	f043 0220 	orr.w	r2, r3, #32
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	40012400 	.word	0x40012400
 8001c48:	20000020 	.word	0x20000020
 8001c4c:	431bde83 	.word	0x431bde83

08001c50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d040      	beq.n	8001cf0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <ADC_Enable+0xac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <ADC_Enable+0xb0>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	0c9b      	lsrs	r3, r3, #18
 8001c8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c8c:	e002      	b.n	8001c94 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f9      	bne.n	8001c8e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c9a:	f7ff fc1b 	bl	80014d4 <HAL_GetTick>
 8001c9e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ca0:	e01f      	b.n	8001ce2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ca2:	f7ff fc17 	bl	80014d4 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d918      	bls.n	8001ce2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d011      	beq.n	8001ce2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	f043 0210 	orr.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e007      	b.n	8001cf2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d1d8      	bne.n	8001ca2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000020 	.word	0x20000020
 8001d00:	431bde83 	.word	0x431bde83

08001d04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d12e      	bne.n	8001d7c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d2e:	f7ff fbd1 	bl	80014d4 <HAL_GetTick>
 8001d32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d34:	e01b      	b.n	8001d6e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d36:	f7ff fbcd 	bl	80014d4 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d914      	bls.n	8001d6e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10d      	bne.n	8001d6e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	f043 0210 	orr.w	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e007      	b.n	8001d7e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d0dc      	beq.n	8001d36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <SysTick_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f7ff ff90 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SysTick_Config+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SysTick_Config+0x40>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff49 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff5e 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff90 	bl	8001e40 <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5f 	bl	8001dec <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffb0 	bl	8001ea4 <SysTick_Config>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b08b      	sub	sp, #44	; 0x2c
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f62:	e169      	b.n	8002238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f64:	2201      	movs	r2, #1
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 8158 	bne.w	8002232 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4a9a      	ldr	r2, [pc, #616]	; (80021f0 <HAL_GPIO_Init+0x2a0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d05e      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001f8c:	4a98      	ldr	r2, [pc, #608]	; (80021f0 <HAL_GPIO_Init+0x2a0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d875      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001f92:	4a98      	ldr	r2, [pc, #608]	; (80021f4 <HAL_GPIO_Init+0x2a4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d058      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001f98:	4a96      	ldr	r2, [pc, #600]	; (80021f4 <HAL_GPIO_Init+0x2a4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d86f      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001f9e:	4a96      	ldr	r2, [pc, #600]	; (80021f8 <HAL_GPIO_Init+0x2a8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d052      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fa4:	4a94      	ldr	r2, [pc, #592]	; (80021f8 <HAL_GPIO_Init+0x2a8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d869      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001faa:	4a94      	ldr	r2, [pc, #592]	; (80021fc <HAL_GPIO_Init+0x2ac>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d04c      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fb0:	4a92      	ldr	r2, [pc, #584]	; (80021fc <HAL_GPIO_Init+0x2ac>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d863      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fb6:	4a92      	ldr	r2, [pc, #584]	; (8002200 <HAL_GPIO_Init+0x2b0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d046      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fbc:	4a90      	ldr	r2, [pc, #576]	; (8002200 <HAL_GPIO_Init+0x2b0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d85d      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d82a      	bhi.n	800201c <HAL_GPIO_Init+0xcc>
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d859      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fca:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <HAL_GPIO_Init+0x80>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	0800204b 	.word	0x0800204b
 8001fd4:	08002025 	.word	0x08002025
 8001fd8:	08002037 	.word	0x08002037
 8001fdc:	08002079 	.word	0x08002079
 8001fe0:	0800207f 	.word	0x0800207f
 8001fe4:	0800207f 	.word	0x0800207f
 8001fe8:	0800207f 	.word	0x0800207f
 8001fec:	0800207f 	.word	0x0800207f
 8001ff0:	0800207f 	.word	0x0800207f
 8001ff4:	0800207f 	.word	0x0800207f
 8001ff8:	0800207f 	.word	0x0800207f
 8001ffc:	0800207f 	.word	0x0800207f
 8002000:	0800207f 	.word	0x0800207f
 8002004:	0800207f 	.word	0x0800207f
 8002008:	0800207f 	.word	0x0800207f
 800200c:	0800207f 	.word	0x0800207f
 8002010:	0800207f 	.word	0x0800207f
 8002014:	0800202d 	.word	0x0800202d
 8002018:	08002041 	.word	0x08002041
 800201c:	4a79      	ldr	r2, [pc, #484]	; (8002204 <HAL_GPIO_Init+0x2b4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002022:	e02c      	b.n	800207e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	623b      	str	r3, [r7, #32]
          break;
 800202a:	e029      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	3304      	adds	r3, #4
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e024      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	3308      	adds	r3, #8
 800203c:	623b      	str	r3, [r7, #32]
          break;
 800203e:	e01f      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	330c      	adds	r3, #12
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e01a      	b.n	8002080 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002052:	2304      	movs	r3, #4
 8002054:	623b      	str	r3, [r7, #32]
          break;
 8002056:	e013      	b.n	8002080 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002060:	2308      	movs	r3, #8
 8002062:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	611a      	str	r2, [r3, #16]
          break;
 800206a:	e009      	b.n	8002080 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800206c:	2308      	movs	r3, #8
 800206e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	615a      	str	r2, [r3, #20]
          break;
 8002076:	e003      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
          break;
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x130>
          break;
 800207e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2bff      	cmp	r3, #255	; 0xff
 8002084:	d801      	bhi.n	800208a <HAL_GPIO_Init+0x13a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	e001      	b.n	800208e <HAL_GPIO_Init+0x13e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3304      	adds	r3, #4
 800208e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2bff      	cmp	r3, #255	; 0xff
 8002094:	d802      	bhi.n	800209c <HAL_GPIO_Init+0x14c>
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	e002      	b.n	80020a2 <HAL_GPIO_Init+0x152>
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	3b08      	subs	r3, #8
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	210f      	movs	r1, #15
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	6a39      	ldr	r1, [r7, #32]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	431a      	orrs	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80b1 	beq.w	8002232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d0:	4b4d      	ldr	r3, [pc, #308]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a4c      	ldr	r2, [pc, #304]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020e8:	4a48      	ldr	r2, [pc, #288]	; (800220c <HAL_GPIO_Init+0x2bc>)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a40      	ldr	r2, [pc, #256]	; (8002210 <HAL_GPIO_Init+0x2c0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <HAL_GPIO_Init+0x1ec>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <HAL_GPIO_Init+0x2c4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00d      	beq.n	8002138 <HAL_GPIO_Init+0x1e8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3e      	ldr	r2, [pc, #248]	; (8002218 <HAL_GPIO_Init+0x2c8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x1e4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3d      	ldr	r2, [pc, #244]	; (800221c <HAL_GPIO_Init+0x2cc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_GPIO_Init+0x1e0>
 800212c:	2303      	movs	r3, #3
 800212e:	e006      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002130:	2304      	movs	r3, #4
 8002132:	e004      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002134:	2302      	movs	r3, #2
 8002136:	e002      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 800213c:	2300      	movs	r3, #0
 800213e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002140:	f002 0203 	and.w	r2, r2, #3
 8002144:	0092      	lsls	r2, r2, #2
 8002146:	4093      	lsls	r3, r2
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800214e:	492f      	ldr	r1, [pc, #188]	; (800220c <HAL_GPIO_Init+0x2bc>)
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002168:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	492c      	ldr	r1, [pc, #176]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	608b      	str	r3, [r1, #8]
 8002174:	e006      	b.n	8002184 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	43db      	mvns	r3, r3
 800217e:	4928      	ldr	r1, [pc, #160]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002180:	4013      	ands	r3, r2
 8002182:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	4922      	ldr	r1, [pc, #136]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	60cb      	str	r3, [r1, #12]
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	491e      	ldr	r1, [pc, #120]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4918      	ldr	r1, [pc, #96]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4914      	ldr	r1, [pc, #80]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d021      	beq.n	8002224 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]
 80021ec:	e021      	b.n	8002232 <HAL_GPIO_Init+0x2e2>
 80021ee:	bf00      	nop
 80021f0:	10320000 	.word	0x10320000
 80021f4:	10310000 	.word	0x10310000
 80021f8:	10220000 	.word	0x10220000
 80021fc:	10210000 	.word	0x10210000
 8002200:	10120000 	.word	0x10120000
 8002204:	10110000 	.word	0x10110000
 8002208:	40021000 	.word	0x40021000
 800220c:	40010000 	.word	0x40010000
 8002210:	40010800 	.word	0x40010800
 8002214:	40010c00 	.word	0x40010c00
 8002218:	40011000 	.word	0x40011000
 800221c:	40011400 	.word	0x40011400
 8002220:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_GPIO_Init+0x304>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	43db      	mvns	r3, r3
 800222c:	4909      	ldr	r1, [pc, #36]	; (8002254 <HAL_GPIO_Init+0x304>)
 800222e:	4013      	ands	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	3301      	adds	r3, #1
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	fa22 f303 	lsr.w	r3, r2, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	f47f ae8e 	bne.w	8001f64 <HAL_GPIO_Init+0x14>
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	372c      	adds	r7, #44	; 0x2c
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002268:	787b      	ldrb	r3, [r7, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002274:	e003      	b.n	800227e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	041a      	lsls	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e272      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8087 	beq.w	80023b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a8:	4b92      	ldr	r3, [pc, #584]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d00c      	beq.n	80022ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b4:	4b8f      	ldr	r3, [pc, #572]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d112      	bne.n	80022e6 <HAL_RCC_OscConfig+0x5e>
 80022c0:	4b8c      	ldr	r3, [pc, #560]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d10b      	bne.n	80022e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ce:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d06c      	beq.n	80023b4 <HAL_RCC_OscConfig+0x12c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d168      	bne.n	80023b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e24c      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x76>
 80022f0:	4b80      	ldr	r3, [pc, #512]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a7f      	ldr	r2, [pc, #508]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	e02e      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x98>
 8002306:	4b7b      	ldr	r3, [pc, #492]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7a      	ldr	r2, [pc, #488]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b78      	ldr	r3, [pc, #480]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a77      	ldr	r2, [pc, #476]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e01d      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0xbc>
 800232a:	4b72      	ldr	r3, [pc, #456]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a71      	ldr	r2, [pc, #452]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6e      	ldr	r2, [pc, #440]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0xd4>
 8002344:	4b6b      	ldr	r3, [pc, #428]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a6a      	ldr	r2, [pc, #424]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800234a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a67      	ldr	r2, [pc, #412]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff f8b6 	bl	80014d4 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236c:	f7ff f8b2 	bl	80014d4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e200      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b5d      	ldr	r3, [pc, #372]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0xe4>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff f8a2 	bl	80014d4 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff f89e 	bl	80014d4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1ec      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x10c>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d063      	beq.n	800248a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023c2:	4b4c      	ldr	r3, [pc, #304]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ce:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d11c      	bne.n	8002414 <HAL_RCC_OscConfig+0x18c>
 80023da:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d116      	bne.n	8002414 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x176>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1c0      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4939      	ldr	r1, [pc, #228]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	e03a      	b.n	800248a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241c:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <HAL_RCC_OscConfig+0x270>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7ff f857 	bl	80014d4 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242a:	f7ff f853 	bl	80014d4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e1a1      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4927      	ldr	r1, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <HAL_RCC_OscConfig+0x270>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff f836 	bl	80014d4 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7ff f832 	bl	80014d4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e180      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d03a      	beq.n	800250c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d019      	beq.n	80024d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_RCC_OscConfig+0x274>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a4:	f7ff f816 	bl	80014d4 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ac:	f7ff f812 	bl	80014d4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e160      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f000 faba 	bl	8002a44 <RCC_Delay>
 80024d0:	e01c      	b.n	800250c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_RCC_OscConfig+0x274>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d8:	f7fe fffc 	bl	80014d4 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024de:	e00f      	b.n	8002500 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e0:	f7fe fff8 	bl	80014d4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d908      	bls.n	8002500 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e146      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	42420000 	.word	0x42420000
 80024fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	4b92      	ldr	r3, [pc, #584]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e9      	bne.n	80024e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a6 	beq.w	8002666 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251e:	4b8b      	ldr	r3, [pc, #556]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10d      	bne.n	8002546 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a87      	ldr	r2, [pc, #540]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b85      	ldr	r3, [pc, #532]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b82      	ldr	r3, [pc, #520]	; (8002750 <HAL_RCC_OscConfig+0x4c8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002552:	4b7f      	ldr	r3, [pc, #508]	; (8002750 <HAL_RCC_OscConfig+0x4c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a7e      	ldr	r2, [pc, #504]	; (8002750 <HAL_RCC_OscConfig+0x4c8>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255e:	f7fe ffb9 	bl	80014d4 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7fe ffb5 	bl	80014d4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b64      	cmp	r3, #100	; 0x64
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e103      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	4b75      	ldr	r3, [pc, #468]	; (8002750 <HAL_RCC_OscConfig+0x4c8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x312>
 800258c:	4b6f      	ldr	r3, [pc, #444]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4a6e      	ldr	r2, [pc, #440]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	e02d      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x334>
 80025a2:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a69      	ldr	r2, [pc, #420]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a66      	ldr	r2, [pc, #408]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6213      	str	r3, [r2, #32]
 80025ba:	e01c      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d10c      	bne.n	80025de <HAL_RCC_OscConfig+0x356>
 80025c4:	4b61      	ldr	r3, [pc, #388]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a60      	ldr	r2, [pc, #384]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	4b5e      	ldr	r3, [pc, #376]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4a5d      	ldr	r2, [pc, #372]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6213      	str	r3, [r2, #32]
 80025dc:	e00b      	b.n	80025f6 <HAL_RCC_OscConfig+0x36e>
 80025de:	4b5b      	ldr	r3, [pc, #364]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a5a      	ldr	r2, [pc, #360]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6213      	str	r3, [r2, #32]
 80025ea:	4b58      	ldr	r3, [pc, #352]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4a57      	ldr	r2, [pc, #348]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d015      	beq.n	800262a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7fe ff69 	bl	80014d4 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7fe ff65 	bl	80014d4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	; 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0b1      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ee      	beq.n	8002606 <HAL_RCC_OscConfig+0x37e>
 8002628:	e014      	b.n	8002654 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262a:	f7fe ff53 	bl	80014d4 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe ff4f 	bl	80014d4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e09b      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	4b40      	ldr	r3, [pc, #256]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ee      	bne.n	8002632 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265a:	4b3c      	ldr	r3, [pc, #240]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a3b      	ldr	r2, [pc, #236]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002664:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8087 	beq.w	800277e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d061      	beq.n	8002740 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d146      	bne.n	8002712 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002684:	4b33      	ldr	r3, [pc, #204]	; (8002754 <HAL_RCC_OscConfig+0x4cc>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7fe ff23 	bl	80014d4 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7fe ff1f 	bl	80014d4 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e06d      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a4:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f0      	bne.n	8002692 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b8:	d108      	bne.n	80026cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4921      	ldr	r1, [pc, #132]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a19      	ldr	r1, [r3, #32]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	430b      	orrs	r3, r1
 80026de:	491b      	ldr	r1, [pc, #108]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x4cc>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7fe fef3 	bl	80014d4 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fe feef 	bl	80014d4 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e03d      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x46a>
 8002710:	e035      	b.n	800277e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <HAL_RCC_OscConfig+0x4cc>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7fe fedc 	bl	80014d4 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fed8 	bl	80014d4 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e026      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_OscConfig+0x4c4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x498>
 800273e:	e01e      	b.n	800277e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d107      	bne.n	8002758 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e019      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_OscConfig+0x500>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	429a      	cmp	r2, r3
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000

0800278c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0d0      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a0:	4b6a      	ldr	r3, [pc, #424]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d910      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	4965      	ldr	r1, [pc, #404]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0b8      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a58      	ldr	r2, [pc, #352]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800280a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	494d      	ldr	r1, [pc, #308]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d040      	beq.n	80028ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d115      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	4b41      	ldr	r3, [pc, #260]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e073      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e06b      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4936      	ldr	r1, [pc, #216]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800287c:	f7fe fe2a 	bl	80014d4 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fe fe26 	bl	80014d4 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e053      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 020c 	and.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1eb      	bne.n	8002884 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d210      	bcs.n	80028dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 0207 	bic.w	r2, r3, #7
 80028c2:	4922      	ldr	r1, [pc, #136]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e032      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4916      	ldr	r1, [pc, #88]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	490e      	ldr	r1, [pc, #56]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800291a:	f000 f821 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 800291e:	4602      	mov	r2, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	490a      	ldr	r1, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	5ccb      	ldrb	r3, [r1, r3]
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1cc>)
 8002934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1d0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fd88 	bl	8001450 <HAL_InitTick>

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40022000 	.word	0x40022000
 8002950:	40021000 	.word	0x40021000
 8002954:	080043e8 	.word	0x080043e8
 8002958:	20000020 	.word	0x20000020
 800295c:	20000024 	.word	0x20000024

08002960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800297a:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b04      	cmp	r3, #4
 8002988:	d002      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x30>
 800298a:	2b08      	cmp	r3, #8
 800298c:	d003      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0x36>
 800298e:	e027      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002992:	613b      	str	r3, [r7, #16]
      break;
 8002994:	e027      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	0c9b      	lsrs	r3, r3, #18
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	4a17      	ldr	r2, [pc, #92]	; (80029fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80029a0:	5cd3      	ldrb	r3, [r2, r3]
 80029a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d010      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	0c5b      	lsrs	r3, r3, #17
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	4a11      	ldr	r2, [pc, #68]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80029c2:	fb03 f202 	mul.w	r2, r3, r2
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e004      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a0c      	ldr	r2, [pc, #48]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	613b      	str	r3, [r7, #16]
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80029e2:	613b      	str	r3, [r7, #16]
      break;
 80029e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e6:	693b      	ldr	r3, [r7, #16]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	007a1200 	.word	0x007a1200
 80029fc:	08004400 	.word	0x08004400
 8002a00:	08004410 	.word	0x08004410
 8002a04:	003d0900 	.word	0x003d0900

08002a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b02      	ldr	r3, [pc, #8]	; (8002a18 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	20000020 	.word	0x20000020

08002a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a20:	f7ff fff2 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	0adb      	lsrs	r3, r3, #11
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	4903      	ldr	r1, [pc, #12]	; (8002a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a32:	5ccb      	ldrb	r3, [r1, r3]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	080043f8 	.word	0x080043f8

08002a44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <RCC_Delay+0x34>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <RCC_Delay+0x38>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	0a5b      	lsrs	r3, r3, #9
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a60:	bf00      	nop
  }
  while (Delay --);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1e5a      	subs	r2, r3, #1
 8002a66:	60fa      	str	r2, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f9      	bne.n	8002a60 <RCC_Delay+0x1c>
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	20000020 	.word	0x20000020
 8002a7c:	10624dd3 	.word	0x10624dd3

08002a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d07d      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa0:	4b4f      	ldr	r3, [pc, #316]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aac:	4b4c      	ldr	r3, [pc, #304]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	4a4b      	ldr	r2, [pc, #300]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	61d3      	str	r3, [r2, #28]
 8002ab8:	4b49      	ldr	r3, [pc, #292]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b46      	ldr	r3, [pc, #280]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d118      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad4:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a42      	ldr	r2, [pc, #264]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fcf8 	bl	80014d4 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae6:	e008      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae8:	f7fe fcf4 	bl	80014d4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e06d      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b06:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d02e      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d027      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b24:	4b2e      	ldr	r3, [pc, #184]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b2e:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b34:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b3a:	4a29      	ldr	r2, [pc, #164]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d014      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fcc3 	bl	80014d4 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fe fcbf 	bl	80014d4 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e036      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ee      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b74:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4917      	ldr	r1, [pc, #92]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	490b      	ldr	r1, [pc, #44]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	4904      	ldr	r1, [pc, #16]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40007000 	.word	0x40007000
 8002be8:	42420440 	.word	0x42420440

08002bec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	2300      	movs	r3, #0
 8002c06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b10      	cmp	r3, #16
 8002c12:	f200 808a 	bhi.w	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d045      	beq.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d075      	beq.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002c22:	e082      	b.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002c24:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c2a:	4b45      	ldr	r3, [pc, #276]	; (8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d07b      	beq.n	8002d2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	0c9b      	lsrs	r3, r3, #18
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	4a41      	ldr	r2, [pc, #260]	; (8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002c40:	5cd3      	ldrb	r3, [r2, r3]
 8002c42:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d015      	beq.n	8002c7a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c4e:	4b3c      	ldr	r3, [pc, #240]	; (8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	0c5b      	lsrs	r3, r3, #17
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	4a3b      	ldr	r2, [pc, #236]	; (8002d48 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002c5a:	5cd3      	ldrb	r3, [r2, r3]
 8002c5c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00d      	beq.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c68:	4a38      	ldr	r2, [pc, #224]	; (8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	e004      	b.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4a34      	ldr	r2, [pc, #208]	; (8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c84:	4b2e      	ldr	r3, [pc, #184]	; (8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c90:	d102      	bne.n	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	61bb      	str	r3, [r7, #24]
      break;
 8002c96:	e04a      	b.n	8002d2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4a2d      	ldr	r2, [pc, #180]	; (8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
      break;
 8002ca6:	e042      	b.n	8002d2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002ca8:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb8:	d108      	bne.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	e01f      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd6:	d109      	bne.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002ce4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	e00f      	b.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cf6:	d11c      	bne.n	8002d32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d016      	beq.n	8002d32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002d04:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002d08:	61bb      	str	r3, [r7, #24]
      break;
 8002d0a:	e012      	b.n	8002d32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d0c:	e011      	b.n	8002d32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d0e:	f7ff fe85 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	0b9b      	lsrs	r3, r3, #14
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	61bb      	str	r3, [r7, #24]
      break;
 8002d28:	e004      	b.n	8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e002      	b.n	8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d32:	bf00      	nop
    }
  }
  return (frequency);
 8002d34:	69bb      	ldr	r3, [r7, #24]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	08004414 	.word	0x08004414
 8002d48:	08004424 	.word	0x08004424
 8002d4c:	007a1200 	.word	0x007a1200
 8002d50:	003d0900 	.word	0x003d0900
 8002d54:	aaaaaaab 	.word	0xaaaaaaab

08002d58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e041      	b.n	8002dee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe fa44 	bl	800120c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	4610      	mov	r0, r2
 8002d98:	f000 f992 	bl	80030c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_TIM_PWM_Start+0x24>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e022      	b.n	8002e62 <HAL_TIM_PWM_Start+0x6a>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d109      	bne.n	8002e36 <HAL_TIM_PWM_Start+0x3e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	e015      	b.n	8002e62 <HAL_TIM_PWM_Start+0x6a>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d109      	bne.n	8002e50 <HAL_TIM_PWM_Start+0x58>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e008      	b.n	8002e62 <HAL_TIM_PWM_Start+0x6a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e05e      	b.n	8002f28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <HAL_TIM_PWM_Start+0x82>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e78:	e013      	b.n	8002ea2 <HAL_TIM_PWM_Start+0xaa>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_PWM_Start+0x92>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e88:	e00b      	b.n	8002ea2 <HAL_TIM_PWM_Start+0xaa>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_PWM_Start+0xa2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e98:	e003      	b.n	8002ea2 <HAL_TIM_PWM_Start+0xaa>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 faf2 	bl	8003494 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <HAL_TIM_PWM_Start+0x138>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d107      	bne.n	8002eca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_TIM_PWM_Start+0x138>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_TIM_PWM_Start+0xfa>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002edc:	d009      	beq.n	8002ef2 <HAL_TIM_PWM_Start+0xfa>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_TIM_PWM_Start+0x13c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_TIM_PWM_Start+0xfa>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <HAL_TIM_PWM_Start+0x140>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d111      	bne.n	8002f16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b06      	cmp	r3, #6
 8002f02:	d010      	beq.n	8002f26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f14:	e007      	b.n	8002f26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800

08002f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0ae      	b.n	80030b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	f200 809f 	bhi.w	80030a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	080030a9 	.word	0x080030a9
 8002f78:	080030a9 	.word	0x080030a9
 8002f7c:	080030a9 	.word	0x080030a9
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	080030a9 	.word	0x080030a9
 8002f88:	080030a9 	.word	0x080030a9
 8002f8c:	080030a9 	.word	0x080030a9
 8002f90:	08003027 	.word	0x08003027
 8002f94:	080030a9 	.word	0x080030a9
 8002f98:	080030a9 	.word	0x080030a9
 8002f9c:	080030a9 	.word	0x080030a9
 8002fa0:	08003067 	.word	0x08003067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f8ea 	bl	8003184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
      break;
 8002fe2:	e064      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f930 	bl	8003250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	619a      	str	r2, [r3, #24]
      break;
 8003024:	e043      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f979 	bl	8003324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0204 	bic.w	r2, r2, #4
 8003050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69d9      	ldr	r1, [r3, #28]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	61da      	str	r2, [r3, #28]
      break;
 8003064:	e023      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f9c3 	bl	80033f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	61da      	str	r2, [r3, #28]
      break;
 80030a6:	e002      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
      break;
 80030ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a29      	ldr	r2, [pc, #164]	; (8003178 <TIM_Base_SetConfig+0xb8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00b      	beq.n	80030f0 <TIM_Base_SetConfig+0x30>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030de:	d007      	beq.n	80030f0 <TIM_Base_SetConfig+0x30>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a26      	ldr	r2, [pc, #152]	; (800317c <TIM_Base_SetConfig+0xbc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d003      	beq.n	80030f0 <TIM_Base_SetConfig+0x30>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a25      	ldr	r2, [pc, #148]	; (8003180 <TIM_Base_SetConfig+0xc0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d108      	bne.n	8003102 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <TIM_Base_SetConfig+0xb8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00b      	beq.n	8003122 <TIM_Base_SetConfig+0x62>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d007      	beq.n	8003122 <TIM_Base_SetConfig+0x62>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <TIM_Base_SetConfig+0xbc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <TIM_Base_SetConfig+0x62>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a18      	ldr	r2, [pc, #96]	; (8003180 <TIM_Base_SetConfig+0xc0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d108      	bne.n	8003134 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a07      	ldr	r2, [pc, #28]	; (8003178 <TIM_Base_SetConfig+0xb8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d103      	bne.n	8003168 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	615a      	str	r2, [r3, #20]
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	40012c00 	.word	0x40012c00
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800

08003184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f023 0201 	bic.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0303 	bic.w	r3, r3, #3
 80031ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f023 0302 	bic.w	r3, r3, #2
 80031cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a1c      	ldr	r2, [pc, #112]	; (800324c <TIM_OC1_SetConfig+0xc8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d10c      	bne.n	80031fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0308 	bic.w	r3, r3, #8
 80031e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a13      	ldr	r2, [pc, #76]	; (800324c <TIM_OC1_SetConfig+0xc8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d111      	bne.n	8003226 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	621a      	str	r2, [r3, #32]
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00

08003250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f023 0210 	bic.w	r2, r3, #16
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f023 0320 	bic.w	r3, r3, #32
 800329a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <TIM_OC2_SetConfig+0xd0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d10d      	bne.n	80032cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a14      	ldr	r2, [pc, #80]	; (8003320 <TIM_OC2_SetConfig+0xd0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d113      	bne.n	80032fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	621a      	str	r2, [r3, #32]
}
 8003316:	bf00      	nop
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40012c00 	.word	0x40012c00

08003324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0303 	bic.w	r3, r3, #3
 800335a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800336c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <TIM_OC3_SetConfig+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d10d      	bne.n	800339e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800339c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <TIM_OC3_SetConfig+0xd0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d113      	bne.n	80033ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40012c00 	.word	0x40012c00

080033f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a0f      	ldr	r2, [pc, #60]	; (8003490 <TIM_OC4_SetConfig+0x98>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d109      	bne.n	800346c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800345e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	019b      	lsls	r3, r3, #6
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	40012c00 	.word	0x40012c00

08003494 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2201      	movs	r2, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1a      	ldr	r2, [r3, #32]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e046      	b.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a16      	ldr	r2, [pc, #88]	; (800358c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00e      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003540:	d009      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a10      	ldr	r2, [pc, #64]	; (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10c      	bne.n	8003570 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	4313      	orrs	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40000400 	.word	0x40000400
 8003594:	40000800 	.word	0x40000800

08003598 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e03d      	b.n	8003630 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
	...

0800363c <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <DWT_Delay_us+0x40>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800364a:	f7ff f9dd 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 800364e:	4603      	mov	r3, r0
 8003650:	4a0b      	ldr	r2, [pc, #44]	; (8003680 <DWT_Delay_us+0x44>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0c9b      	lsrs	r3, r3, #18
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8003660:	bf00      	nop
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <DWT_Delay_us+0x40>)
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad2      	subs	r2, r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	d3f8      	bcc.n	8003662 <DWT_Delay_us+0x26>
		;
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	e0001000 	.word	0xe0001000
 8003680:	431bde83 	.word	0x431bde83

08003684 <usDelay>:
    usDelay(100); \
  } while (0) //BA3D EL MACRO MAFISH SMICOULMN

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ffd3 	bl	800363c <DWT_Delay_us>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) //function tekteb bs fel 4 bits 3ashan anan fel 4bit mode
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	460b      	mov	r3, r1
 80036a8:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);//write
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	7a1b      	ldrb	r3, [r3, #8]
 80036b4:	4619      	mov	r1, r3
 80036b6:	230f      	movs	r3, #15
 80036b8:	408b      	lsls	r3, r1
 80036ba:	43db      	mvns	r3, r3
 80036bc:	4619      	mov	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	400a      	ands	r2, r1
 80036c4:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	7a09      	ldrb	r1, [r1, #8]
 80036d2:	408b      	lsls	r3, r1
 80036d4:	4619      	mov	r1, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	430a      	orrs	r2, r1
 80036dc:	60da      	str	r2, [r3, #12]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6958      	ldr	r0, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8b1b      	ldrh	r3, [r3, #24]
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	4619      	mov	r1, r3
 8003700:	f7fe fdaa 	bl	8002258 <HAL_GPIO_WritePin>
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68d8      	ldr	r0, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8a1b      	ldrh	r3, [r3, #16]
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	4619      	mov	r1, r3
 8003724:	f7fe fd98 	bl	8002258 <HAL_GPIO_WritePin>
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 8003738:	f107 0308 	add.w	r3, r7, #8
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	2301      	movs	r3, #1
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	2302      	movs	r3, #2
 8003752:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f107 0208 	add.w	r2, r7, #8
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fbf6 	bl	8001f50 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8a1b      	ldrh	r3, [r3, #16]
 8003768:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f107 0208 	add.w	r2, r7, #8
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f7fe fbeb 	bl	8001f50 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;//da partial write 3ashan a7ded el bits beta3et el pins el wasla
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	7a1b      	ldrb	r3, [r3, #8]
 800377e:	461a      	mov	r2, r3
 8003780:	230f      	movs	r3, #15
 8003782:	4093      	lsls	r3, r2
 8003784:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f107 0208 	add.w	r2, r7, #8
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe fbdd 	bl	8001f50 <HAL_GPIO_Init>
}
 8003796:	bf00      	nop
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	460b      	mov	r3, r1
 80037a8:	70fb      	strb	r3, [r7, #3]
 80037aa:	4613      	mov	r3, r2
 80037ac:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ff98 	bl	80036e8 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 80037b8:	78bb      	ldrb	r3, [r7, #2]
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff6c 	bl	800369e <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 80037c6:	2101      	movs	r1, #1
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff9f 	bl	800370c <EN_SET>
 80037ce:	200a      	movs	r0, #10
 80037d0:	f7ff ff58 	bl	8003684 <usDelay>
 80037d4:	2100      	movs	r1, #0
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ff98 	bl	800370c <EN_SET>
 80037dc:	2064      	movs	r0, #100	; 0x64
 80037de:	f7ff ff51 	bl	8003684 <usDelay>
	;
	Write_HalfByte(lcd, value);
 80037e2:	78bb      	ldrb	r3, [r7, #2]
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ff59 	bl	800369e <Write_HalfByte>
	PulseEn
 80037ec:	2101      	movs	r1, #1
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff8c 	bl	800370c <EN_SET>
 80037f4:	200a      	movs	r0, #10
 80037f6:	f7ff ff45 	bl	8003684 <usDelay>
 80037fa:	2100      	movs	r1, #0
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ff85 	bl	800370c <EN_SET>
 8003802:	2064      	movs	r0, #100	; 0x64
 8003804:	f7ff ff3e 	bl	8003684 <usDelay>
	;
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
 800381c:	4613      	mov	r3, r2
 800381e:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8003820:	f7fd fdd0 	bl	80013c4 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ff83 	bl	8003730 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2240      	movs	r2, #64	; 0x40
 8003834:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	78ba      	ldrb	r2, [r7, #2]
 800383a:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 800383c:	78bb      	ldrb	r3, [r7, #2]
 800383e:	3340      	adds	r3, #64	; 0x40
 8003840:	b2da      	uxtb	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);//hena bedayt 4 bit mode intialization
 8003846:	2100      	movs	r1, #0
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ff4d 	bl	80036e8 <RS_SET>
	EN_SET(lcd, 0);
 800384e:	2100      	movs	r1, #0
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff5b 	bl	800370c <EN_SET>
	usDelay(50000);//3AMELHA BE ZEYADA 3ASHAN ADman nafsy
 8003856:	f24c 3050 	movw	r0, #50000	; 0xc350
 800385a:	f7ff ff13 	bl	8003684 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
 8003862:	e018      	b.n	8003896 <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 8003864:	2103      	movs	r1, #3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ff19 	bl	800369e <Write_HalfByte>
		PulseEn
 800386c:	2101      	movs	r1, #1
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff ff4c 	bl	800370c <EN_SET>
 8003874:	200a      	movs	r0, #10
 8003876:	f7ff ff05 	bl	8003684 <usDelay>
 800387a:	2100      	movs	r1, #0
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ff45 	bl	800370c <EN_SET>
 8003882:	2064      	movs	r0, #100	; 0x64
 8003884:	f7ff fefe 	bl	8003684 <usDelay>
		;
		usDelay(4500);
 8003888:	f241 1094 	movw	r0, #4500	; 0x1194
 800388c:	f7ff fefa 	bl	8003684 <usDelay>
	for (x = 0; x < 2; x++)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	3301      	adds	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d9e3      	bls.n	8003864 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 800389c:	2103      	movs	r1, #3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff fefd 	bl	800369e <Write_HalfByte>
	PulseEn
 80038a4:	2101      	movs	r1, #1
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff30 	bl	800370c <EN_SET>
 80038ac:	200a      	movs	r0, #10
 80038ae:	f7ff fee9 	bl	8003684 <usDelay>
 80038b2:	2100      	movs	r1, #0
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ff29 	bl	800370c <EN_SET>
 80038ba:	2064      	movs	r0, #100	; 0x64
 80038bc:	f7ff fee2 	bl	8003684 <usDelay>
	;
	usDelay(150);
 80038c0:	2096      	movs	r0, #150	; 0x96
 80038c2:	f7ff fedf 	bl	8003684 <usDelay>
	Write_HalfByte(lcd, 0x02);//kda ana ba2olhA ANA HASHTAGHAL 4 BIT MODE
 80038c6:	2102      	movs	r1, #2
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fee8 	bl	800369e <Write_HalfByte>
	PulseEn
 80038ce:	2101      	movs	r1, #1
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ff1b 	bl	800370c <EN_SET>
 80038d6:	200a      	movs	r0, #10
 80038d8:	f7ff fed4 	bl	8003684 <usDelay>
 80038dc:	2100      	movs	r1, #0
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ff14 	bl	800370c <EN_SET>
 80038e4:	2064      	movs	r0, #100	; 0x64
 80038e6:	f7ff fecd 	bl	8003684 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS); //E2RA EL DATA SHEET
 80038ea:	2228      	movs	r2, #40	; 0x28
 80038ec:	2100      	movs	r1, #0
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ff55 	bl	800379e <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 80038f4:	2300      	movs	r3, #0
 80038f6:	2200      	movs	r2, #0
 80038f8:	2101      	movs	r1, #1
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f86d 	bl	80039da <Alcd_Display_Control>
	Alcd_Clear(lcd);//TAGANOBAN LE AY NOISE
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f859 	bl	80039b8 <Alcd_Clear>
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	70fb      	strb	r3, [r7, #3]
 800391a:	4613      	mov	r3, r2
 800391c:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	7e9a      	ldrb	r2, [r3, #26]
 8003926:	78bb      	ldrb	r3, [r7, #2]
 8003928:	4413      	add	r3, r2
 800392a:	b2db      	uxtb	r3, r3
 800392c:	b25b      	sxtb	r3, r3
 800392e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003932:	b25b      	sxtb	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	2100      	movs	r1, #0
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff ff2f 	bl	800379e <Alcd_SendByte>
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8003956:	2300      	movs	r3, #0
 8003958:	75fb      	strb	r3, [r7, #23]
 800395a:	e00b      	b.n	8003974 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	60ba      	str	r2, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	2101      	movs	r1, #1
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f7ff ff18 	bl	800379e <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	3301      	adds	r3, #1
 8003972:	75fb      	strb	r3, [r7, #23]
 8003974:	7dfa      	ldrb	r2, [r7, #23]
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	429a      	cmp	r2, r3
 800397a:	d3ef      	bcc.n	800395c <Alcd_Put_n+0x14>
	}
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	72fb      	strb	r3, [r7, #11]
 8003994:	4613      	mov	r3, r2
 8003996:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8003998:	7aba      	ldrb	r2, [r7, #10]
 800399a:	7afb      	ldrb	r3, [r7, #11]
 800399c:	4619      	mov	r1, r3
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff ffb5 	bl	800390e <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 80039a4:	7e3b      	ldrb	r3, [r7, #24]
 80039a6:	461a      	mov	r2, r3
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff ffcc 	bl	8003948 <Alcd_Put_n>
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 80039c0:	2201      	movs	r2, #1
 80039c2:	2100      	movs	r1, #0
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff feea 	bl	800379e <Alcd_SendByte>
	usDelay(2000);
 80039ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80039ce:	f7ff fe59 	bl	8003684 <usDelay>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	4608      	mov	r0, r1
 80039e4:	4611      	mov	r1, r2
 80039e6:	461a      	mov	r2, r3
 80039e8:	4603      	mov	r3, r0
 80039ea:	70fb      	strb	r3, [r7, #3]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70bb      	strb	r3, [r7, #2]
 80039f0:	4613      	mov	r3, r2
 80039f2:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d006      	beq.n	8003a0e <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7f9b      	ldrb	r3, [r3, #30]
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 8003a0e:	78bb      	ldrb	r3, [r7, #2]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d006      	beq.n	8003a22 <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7f9b      	ldrb	r3, [r3, #30]
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 8003a22:	787b      	ldrb	r3, [r7, #1]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d006      	beq.n	8003a36 <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7f9b      	ldrb	r3, [r3, #30]
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7f9b      	ldrb	r3, [r3, #30]
 8003a3a:	f043 0304 	orr.w	r3, r3, #4
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	7f9b      	ldrb	r3, [r3, #30]
 8003a48:	f043 0308 	orr.w	r3, r3, #8
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2100      	movs	r1, #0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fea3 	bl	800379e <Alcd_SendByte>
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <__errno>:
 8003a60:	4b01      	ldr	r3, [pc, #4]	; (8003a68 <__errno+0x8>)
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	2000002c 	.word	0x2000002c

08003a6c <__libc_init_array>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	2600      	movs	r6, #0
 8003a70:	4d0c      	ldr	r5, [pc, #48]	; (8003aa4 <__libc_init_array+0x38>)
 8003a72:	4c0d      	ldr	r4, [pc, #52]	; (8003aa8 <__libc_init_array+0x3c>)
 8003a74:	1b64      	subs	r4, r4, r5
 8003a76:	10a4      	asrs	r4, r4, #2
 8003a78:	42a6      	cmp	r6, r4
 8003a7a:	d109      	bne.n	8003a90 <__libc_init_array+0x24>
 8003a7c:	f000 fc9c 	bl	80043b8 <_init>
 8003a80:	2600      	movs	r6, #0
 8003a82:	4d0a      	ldr	r5, [pc, #40]	; (8003aac <__libc_init_array+0x40>)
 8003a84:	4c0a      	ldr	r4, [pc, #40]	; (8003ab0 <__libc_init_array+0x44>)
 8003a86:	1b64      	subs	r4, r4, r5
 8003a88:	10a4      	asrs	r4, r4, #2
 8003a8a:	42a6      	cmp	r6, r4
 8003a8c:	d105      	bne.n	8003a9a <__libc_init_array+0x2e>
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a94:	4798      	blx	r3
 8003a96:	3601      	adds	r6, #1
 8003a98:	e7ee      	b.n	8003a78 <__libc_init_array+0xc>
 8003a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9e:	4798      	blx	r3
 8003aa0:	3601      	adds	r6, #1
 8003aa2:	e7f2      	b.n	8003a8a <__libc_init_array+0x1e>
 8003aa4:	0800445c 	.word	0x0800445c
 8003aa8:	0800445c 	.word	0x0800445c
 8003aac:	0800445c 	.word	0x0800445c
 8003ab0:	08004460 	.word	0x08004460

08003ab4 <memset>:
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	4402      	add	r2, r0
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d100      	bne.n	8003abe <memset+0xa>
 8003abc:	4770      	bx	lr
 8003abe:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac2:	e7f9      	b.n	8003ab8 <memset+0x4>

08003ac4 <siprintf>:
 8003ac4:	b40e      	push	{r1, r2, r3}
 8003ac6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003aca:	b500      	push	{lr}
 8003acc:	b09c      	sub	sp, #112	; 0x70
 8003ace:	ab1d      	add	r3, sp, #116	; 0x74
 8003ad0:	9002      	str	r0, [sp, #8]
 8003ad2:	9006      	str	r0, [sp, #24]
 8003ad4:	9107      	str	r1, [sp, #28]
 8003ad6:	9104      	str	r1, [sp, #16]
 8003ad8:	4808      	ldr	r0, [pc, #32]	; (8003afc <siprintf+0x38>)
 8003ada:	4909      	ldr	r1, [pc, #36]	; (8003b00 <siprintf+0x3c>)
 8003adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ae0:	9105      	str	r1, [sp, #20]
 8003ae2:	6800      	ldr	r0, [r0, #0]
 8003ae4:	a902      	add	r1, sp, #8
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	f000 f868 	bl	8003bbc <_svfiprintf_r>
 8003aec:	2200      	movs	r2, #0
 8003aee:	9b02      	ldr	r3, [sp, #8]
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	b01c      	add	sp, #112	; 0x70
 8003af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003af8:	b003      	add	sp, #12
 8003afa:	4770      	bx	lr
 8003afc:	2000002c 	.word	0x2000002c
 8003b00:	ffff0208 	.word	0xffff0208

08003b04 <__ssputs_r>:
 8003b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b08:	688e      	ldr	r6, [r1, #8]
 8003b0a:	4682      	mov	sl, r0
 8003b0c:	429e      	cmp	r6, r3
 8003b0e:	460c      	mov	r4, r1
 8003b10:	4690      	mov	r8, r2
 8003b12:	461f      	mov	r7, r3
 8003b14:	d838      	bhi.n	8003b88 <__ssputs_r+0x84>
 8003b16:	898a      	ldrh	r2, [r1, #12]
 8003b18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b1c:	d032      	beq.n	8003b84 <__ssputs_r+0x80>
 8003b1e:	6825      	ldr	r5, [r4, #0]
 8003b20:	6909      	ldr	r1, [r1, #16]
 8003b22:	3301      	adds	r3, #1
 8003b24:	eba5 0901 	sub.w	r9, r5, r1
 8003b28:	6965      	ldr	r5, [r4, #20]
 8003b2a:	444b      	add	r3, r9
 8003b2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b34:	106d      	asrs	r5, r5, #1
 8003b36:	429d      	cmp	r5, r3
 8003b38:	bf38      	it	cc
 8003b3a:	461d      	movcc	r5, r3
 8003b3c:	0553      	lsls	r3, r2, #21
 8003b3e:	d531      	bpl.n	8003ba4 <__ssputs_r+0xa0>
 8003b40:	4629      	mov	r1, r5
 8003b42:	f000 fb6f 	bl	8004224 <_malloc_r>
 8003b46:	4606      	mov	r6, r0
 8003b48:	b950      	cbnz	r0, 8003b60 <__ssputs_r+0x5c>
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	f8ca 3000 	str.w	r3, [sl]
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5a:	81a3      	strh	r3, [r4, #12]
 8003b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b60:	464a      	mov	r2, r9
 8003b62:	6921      	ldr	r1, [r4, #16]
 8003b64:	f000 face 	bl	8004104 <memcpy>
 8003b68:	89a3      	ldrh	r3, [r4, #12]
 8003b6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b72:	81a3      	strh	r3, [r4, #12]
 8003b74:	6126      	str	r6, [r4, #16]
 8003b76:	444e      	add	r6, r9
 8003b78:	6026      	str	r6, [r4, #0]
 8003b7a:	463e      	mov	r6, r7
 8003b7c:	6165      	str	r5, [r4, #20]
 8003b7e:	eba5 0509 	sub.w	r5, r5, r9
 8003b82:	60a5      	str	r5, [r4, #8]
 8003b84:	42be      	cmp	r6, r7
 8003b86:	d900      	bls.n	8003b8a <__ssputs_r+0x86>
 8003b88:	463e      	mov	r6, r7
 8003b8a:	4632      	mov	r2, r6
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	f000 fac6 	bl	8004120 <memmove>
 8003b94:	68a3      	ldr	r3, [r4, #8]
 8003b96:	2000      	movs	r0, #0
 8003b98:	1b9b      	subs	r3, r3, r6
 8003b9a:	60a3      	str	r3, [r4, #8]
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	4433      	add	r3, r6
 8003ba0:	6023      	str	r3, [r4, #0]
 8003ba2:	e7db      	b.n	8003b5c <__ssputs_r+0x58>
 8003ba4:	462a      	mov	r2, r5
 8003ba6:	f000 fbb1 	bl	800430c <_realloc_r>
 8003baa:	4606      	mov	r6, r0
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d1e1      	bne.n	8003b74 <__ssputs_r+0x70>
 8003bb0:	4650      	mov	r0, sl
 8003bb2:	6921      	ldr	r1, [r4, #16]
 8003bb4:	f000 face 	bl	8004154 <_free_r>
 8003bb8:	e7c7      	b.n	8003b4a <__ssputs_r+0x46>
	...

08003bbc <_svfiprintf_r>:
 8003bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc0:	4698      	mov	r8, r3
 8003bc2:	898b      	ldrh	r3, [r1, #12]
 8003bc4:	4607      	mov	r7, r0
 8003bc6:	061b      	lsls	r3, r3, #24
 8003bc8:	460d      	mov	r5, r1
 8003bca:	4614      	mov	r4, r2
 8003bcc:	b09d      	sub	sp, #116	; 0x74
 8003bce:	d50e      	bpl.n	8003bee <_svfiprintf_r+0x32>
 8003bd0:	690b      	ldr	r3, [r1, #16]
 8003bd2:	b963      	cbnz	r3, 8003bee <_svfiprintf_r+0x32>
 8003bd4:	2140      	movs	r1, #64	; 0x40
 8003bd6:	f000 fb25 	bl	8004224 <_malloc_r>
 8003bda:	6028      	str	r0, [r5, #0]
 8003bdc:	6128      	str	r0, [r5, #16]
 8003bde:	b920      	cbnz	r0, 8003bea <_svfiprintf_r+0x2e>
 8003be0:	230c      	movs	r3, #12
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	e0d1      	b.n	8003d8e <_svfiprintf_r+0x1d2>
 8003bea:	2340      	movs	r3, #64	; 0x40
 8003bec:	616b      	str	r3, [r5, #20]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bf8:	2330      	movs	r3, #48	; 0x30
 8003bfa:	f04f 0901 	mov.w	r9, #1
 8003bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003da8 <_svfiprintf_r+0x1ec>
 8003c06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	469a      	mov	sl, r3
 8003c0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c12:	b10a      	cbz	r2, 8003c18 <_svfiprintf_r+0x5c>
 8003c14:	2a25      	cmp	r2, #37	; 0x25
 8003c16:	d1f9      	bne.n	8003c0c <_svfiprintf_r+0x50>
 8003c18:	ebba 0b04 	subs.w	fp, sl, r4
 8003c1c:	d00b      	beq.n	8003c36 <_svfiprintf_r+0x7a>
 8003c1e:	465b      	mov	r3, fp
 8003c20:	4622      	mov	r2, r4
 8003c22:	4629      	mov	r1, r5
 8003c24:	4638      	mov	r0, r7
 8003c26:	f7ff ff6d 	bl	8003b04 <__ssputs_r>
 8003c2a:	3001      	adds	r0, #1
 8003c2c:	f000 80aa 	beq.w	8003d84 <_svfiprintf_r+0x1c8>
 8003c30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c32:	445a      	add	r2, fp
 8003c34:	9209      	str	r2, [sp, #36]	; 0x24
 8003c36:	f89a 3000 	ldrb.w	r3, [sl]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80a2 	beq.w	8003d84 <_svfiprintf_r+0x1c8>
 8003c40:	2300      	movs	r3, #0
 8003c42:	f04f 32ff 	mov.w	r2, #4294967295
 8003c46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c4a:	f10a 0a01 	add.w	sl, sl, #1
 8003c4e:	9304      	str	r3, [sp, #16]
 8003c50:	9307      	str	r3, [sp, #28]
 8003c52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c56:	931a      	str	r3, [sp, #104]	; 0x68
 8003c58:	4654      	mov	r4, sl
 8003c5a:	2205      	movs	r2, #5
 8003c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c60:	4851      	ldr	r0, [pc, #324]	; (8003da8 <_svfiprintf_r+0x1ec>)
 8003c62:	f000 fa41 	bl	80040e8 <memchr>
 8003c66:	9a04      	ldr	r2, [sp, #16]
 8003c68:	b9d8      	cbnz	r0, 8003ca2 <_svfiprintf_r+0xe6>
 8003c6a:	06d0      	lsls	r0, r2, #27
 8003c6c:	bf44      	itt	mi
 8003c6e:	2320      	movmi	r3, #32
 8003c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c74:	0711      	lsls	r1, r2, #28
 8003c76:	bf44      	itt	mi
 8003c78:	232b      	movmi	r3, #43	; 0x2b
 8003c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c82:	2b2a      	cmp	r3, #42	; 0x2a
 8003c84:	d015      	beq.n	8003cb2 <_svfiprintf_r+0xf6>
 8003c86:	4654      	mov	r4, sl
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f04f 0c0a 	mov.w	ip, #10
 8003c8e:	9a07      	ldr	r2, [sp, #28]
 8003c90:	4621      	mov	r1, r4
 8003c92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c96:	3b30      	subs	r3, #48	; 0x30
 8003c98:	2b09      	cmp	r3, #9
 8003c9a:	d94e      	bls.n	8003d3a <_svfiprintf_r+0x17e>
 8003c9c:	b1b0      	cbz	r0, 8003ccc <_svfiprintf_r+0x110>
 8003c9e:	9207      	str	r2, [sp, #28]
 8003ca0:	e014      	b.n	8003ccc <_svfiprintf_r+0x110>
 8003ca2:	eba0 0308 	sub.w	r3, r0, r8
 8003ca6:	fa09 f303 	lsl.w	r3, r9, r3
 8003caa:	4313      	orrs	r3, r2
 8003cac:	46a2      	mov	sl, r4
 8003cae:	9304      	str	r3, [sp, #16]
 8003cb0:	e7d2      	b.n	8003c58 <_svfiprintf_r+0x9c>
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	1d19      	adds	r1, r3, #4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	9103      	str	r1, [sp, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bfbb      	ittet	lt
 8003cbe:	425b      	neglt	r3, r3
 8003cc0:	f042 0202 	orrlt.w	r2, r2, #2
 8003cc4:	9307      	strge	r3, [sp, #28]
 8003cc6:	9307      	strlt	r3, [sp, #28]
 8003cc8:	bfb8      	it	lt
 8003cca:	9204      	strlt	r2, [sp, #16]
 8003ccc:	7823      	ldrb	r3, [r4, #0]
 8003cce:	2b2e      	cmp	r3, #46	; 0x2e
 8003cd0:	d10c      	bne.n	8003cec <_svfiprintf_r+0x130>
 8003cd2:	7863      	ldrb	r3, [r4, #1]
 8003cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd6:	d135      	bne.n	8003d44 <_svfiprintf_r+0x188>
 8003cd8:	9b03      	ldr	r3, [sp, #12]
 8003cda:	3402      	adds	r4, #2
 8003cdc:	1d1a      	adds	r2, r3, #4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	9203      	str	r2, [sp, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bfb8      	it	lt
 8003ce6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cea:	9305      	str	r3, [sp, #20]
 8003cec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003dac <_svfiprintf_r+0x1f0>
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	4650      	mov	r0, sl
 8003cf4:	7821      	ldrb	r1, [r4, #0]
 8003cf6:	f000 f9f7 	bl	80040e8 <memchr>
 8003cfa:	b140      	cbz	r0, 8003d0e <_svfiprintf_r+0x152>
 8003cfc:	2340      	movs	r3, #64	; 0x40
 8003cfe:	eba0 000a 	sub.w	r0, r0, sl
 8003d02:	fa03 f000 	lsl.w	r0, r3, r0
 8003d06:	9b04      	ldr	r3, [sp, #16]
 8003d08:	3401      	adds	r4, #1
 8003d0a:	4303      	orrs	r3, r0
 8003d0c:	9304      	str	r3, [sp, #16]
 8003d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d12:	2206      	movs	r2, #6
 8003d14:	4826      	ldr	r0, [pc, #152]	; (8003db0 <_svfiprintf_r+0x1f4>)
 8003d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d1a:	f000 f9e5 	bl	80040e8 <memchr>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d038      	beq.n	8003d94 <_svfiprintf_r+0x1d8>
 8003d22:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <_svfiprintf_r+0x1f8>)
 8003d24:	bb1b      	cbnz	r3, 8003d6e <_svfiprintf_r+0x1b2>
 8003d26:	9b03      	ldr	r3, [sp, #12]
 8003d28:	3307      	adds	r3, #7
 8003d2a:	f023 0307 	bic.w	r3, r3, #7
 8003d2e:	3308      	adds	r3, #8
 8003d30:	9303      	str	r3, [sp, #12]
 8003d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d34:	4433      	add	r3, r6
 8003d36:	9309      	str	r3, [sp, #36]	; 0x24
 8003d38:	e767      	b.n	8003c0a <_svfiprintf_r+0x4e>
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d42:	e7a5      	b.n	8003c90 <_svfiprintf_r+0xd4>
 8003d44:	2300      	movs	r3, #0
 8003d46:	f04f 0c0a 	mov.w	ip, #10
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	3401      	adds	r4, #1
 8003d4e:	9305      	str	r3, [sp, #20]
 8003d50:	4620      	mov	r0, r4
 8003d52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d56:	3a30      	subs	r2, #48	; 0x30
 8003d58:	2a09      	cmp	r2, #9
 8003d5a:	d903      	bls.n	8003d64 <_svfiprintf_r+0x1a8>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0c5      	beq.n	8003cec <_svfiprintf_r+0x130>
 8003d60:	9105      	str	r1, [sp, #20]
 8003d62:	e7c3      	b.n	8003cec <_svfiprintf_r+0x130>
 8003d64:	4604      	mov	r4, r0
 8003d66:	2301      	movs	r3, #1
 8003d68:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d6c:	e7f0      	b.n	8003d50 <_svfiprintf_r+0x194>
 8003d6e:	ab03      	add	r3, sp, #12
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	462a      	mov	r2, r5
 8003d74:	4638      	mov	r0, r7
 8003d76:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <_svfiprintf_r+0x1fc>)
 8003d78:	a904      	add	r1, sp, #16
 8003d7a:	f3af 8000 	nop.w
 8003d7e:	1c42      	adds	r2, r0, #1
 8003d80:	4606      	mov	r6, r0
 8003d82:	d1d6      	bne.n	8003d32 <_svfiprintf_r+0x176>
 8003d84:	89ab      	ldrh	r3, [r5, #12]
 8003d86:	065b      	lsls	r3, r3, #25
 8003d88:	f53f af2c 	bmi.w	8003be4 <_svfiprintf_r+0x28>
 8003d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d8e:	b01d      	add	sp, #116	; 0x74
 8003d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d94:	ab03      	add	r3, sp, #12
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	462a      	mov	r2, r5
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <_svfiprintf_r+0x1fc>)
 8003d9e:	a904      	add	r1, sp, #16
 8003da0:	f000 f87c 	bl	8003e9c <_printf_i>
 8003da4:	e7eb      	b.n	8003d7e <_svfiprintf_r+0x1c2>
 8003da6:	bf00      	nop
 8003da8:	08004426 	.word	0x08004426
 8003dac:	0800442c 	.word	0x0800442c
 8003db0:	08004430 	.word	0x08004430
 8003db4:	00000000 	.word	0x00000000
 8003db8:	08003b05 	.word	0x08003b05

08003dbc <_printf_common>:
 8003dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc0:	4616      	mov	r6, r2
 8003dc2:	4699      	mov	r9, r3
 8003dc4:	688a      	ldr	r2, [r1, #8]
 8003dc6:	690b      	ldr	r3, [r1, #16]
 8003dc8:	4607      	mov	r7, r0
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	bfb8      	it	lt
 8003dce:	4613      	movlt	r3, r2
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ddc:	b10a      	cbz	r2, 8003de2 <_printf_common+0x26>
 8003dde:	3301      	adds	r3, #1
 8003de0:	6033      	str	r3, [r6, #0]
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	0699      	lsls	r1, r3, #26
 8003de6:	bf42      	ittt	mi
 8003de8:	6833      	ldrmi	r3, [r6, #0]
 8003dea:	3302      	addmi	r3, #2
 8003dec:	6033      	strmi	r3, [r6, #0]
 8003dee:	6825      	ldr	r5, [r4, #0]
 8003df0:	f015 0506 	ands.w	r5, r5, #6
 8003df4:	d106      	bne.n	8003e04 <_printf_common+0x48>
 8003df6:	f104 0a19 	add.w	sl, r4, #25
 8003dfa:	68e3      	ldr	r3, [r4, #12]
 8003dfc:	6832      	ldr	r2, [r6, #0]
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	42ab      	cmp	r3, r5
 8003e02:	dc28      	bgt.n	8003e56 <_printf_common+0x9a>
 8003e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e08:	1e13      	subs	r3, r2, #0
 8003e0a:	6822      	ldr	r2, [r4, #0]
 8003e0c:	bf18      	it	ne
 8003e0e:	2301      	movne	r3, #1
 8003e10:	0692      	lsls	r2, r2, #26
 8003e12:	d42d      	bmi.n	8003e70 <_printf_common+0xb4>
 8003e14:	4649      	mov	r1, r9
 8003e16:	4638      	mov	r0, r7
 8003e18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e1c:	47c0      	blx	r8
 8003e1e:	3001      	adds	r0, #1
 8003e20:	d020      	beq.n	8003e64 <_printf_common+0xa8>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	68e5      	ldr	r5, [r4, #12]
 8003e26:	f003 0306 	and.w	r3, r3, #6
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	bf18      	it	ne
 8003e2e:	2500      	movne	r5, #0
 8003e30:	6832      	ldr	r2, [r6, #0]
 8003e32:	f04f 0600 	mov.w	r6, #0
 8003e36:	68a3      	ldr	r3, [r4, #8]
 8003e38:	bf08      	it	eq
 8003e3a:	1aad      	subeq	r5, r5, r2
 8003e3c:	6922      	ldr	r2, [r4, #16]
 8003e3e:	bf08      	it	eq
 8003e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e44:	4293      	cmp	r3, r2
 8003e46:	bfc4      	itt	gt
 8003e48:	1a9b      	subgt	r3, r3, r2
 8003e4a:	18ed      	addgt	r5, r5, r3
 8003e4c:	341a      	adds	r4, #26
 8003e4e:	42b5      	cmp	r5, r6
 8003e50:	d11a      	bne.n	8003e88 <_printf_common+0xcc>
 8003e52:	2000      	movs	r0, #0
 8003e54:	e008      	b.n	8003e68 <_printf_common+0xac>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4652      	mov	r2, sl
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	47c0      	blx	r8
 8003e60:	3001      	adds	r0, #1
 8003e62:	d103      	bne.n	8003e6c <_printf_common+0xb0>
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6c:	3501      	adds	r5, #1
 8003e6e:	e7c4      	b.n	8003dfa <_printf_common+0x3e>
 8003e70:	2030      	movs	r0, #48	; 0x30
 8003e72:	18e1      	adds	r1, r4, r3
 8003e74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e7e:	4422      	add	r2, r4
 8003e80:	3302      	adds	r3, #2
 8003e82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e86:	e7c5      	b.n	8003e14 <_printf_common+0x58>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	4638      	mov	r0, r7
 8003e90:	47c0      	blx	r8
 8003e92:	3001      	adds	r0, #1
 8003e94:	d0e6      	beq.n	8003e64 <_printf_common+0xa8>
 8003e96:	3601      	adds	r6, #1
 8003e98:	e7d9      	b.n	8003e4e <_printf_common+0x92>
	...

08003e9c <_printf_i>:
 8003e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea0:	7e0f      	ldrb	r7, [r1, #24]
 8003ea2:	4691      	mov	r9, r2
 8003ea4:	2f78      	cmp	r7, #120	; 0x78
 8003ea6:	4680      	mov	r8, r0
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	469a      	mov	sl, r3
 8003eac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003eae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003eb2:	d807      	bhi.n	8003ec4 <_printf_i+0x28>
 8003eb4:	2f62      	cmp	r7, #98	; 0x62
 8003eb6:	d80a      	bhi.n	8003ece <_printf_i+0x32>
 8003eb8:	2f00      	cmp	r7, #0
 8003eba:	f000 80d9 	beq.w	8004070 <_printf_i+0x1d4>
 8003ebe:	2f58      	cmp	r7, #88	; 0x58
 8003ec0:	f000 80a4 	beq.w	800400c <_printf_i+0x170>
 8003ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ec8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ecc:	e03a      	b.n	8003f44 <_printf_i+0xa8>
 8003ece:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ed2:	2b15      	cmp	r3, #21
 8003ed4:	d8f6      	bhi.n	8003ec4 <_printf_i+0x28>
 8003ed6:	a101      	add	r1, pc, #4	; (adr r1, 8003edc <_printf_i+0x40>)
 8003ed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003edc:	08003f35 	.word	0x08003f35
 8003ee0:	08003f49 	.word	0x08003f49
 8003ee4:	08003ec5 	.word	0x08003ec5
 8003ee8:	08003ec5 	.word	0x08003ec5
 8003eec:	08003ec5 	.word	0x08003ec5
 8003ef0:	08003ec5 	.word	0x08003ec5
 8003ef4:	08003f49 	.word	0x08003f49
 8003ef8:	08003ec5 	.word	0x08003ec5
 8003efc:	08003ec5 	.word	0x08003ec5
 8003f00:	08003ec5 	.word	0x08003ec5
 8003f04:	08003ec5 	.word	0x08003ec5
 8003f08:	08004057 	.word	0x08004057
 8003f0c:	08003f79 	.word	0x08003f79
 8003f10:	08004039 	.word	0x08004039
 8003f14:	08003ec5 	.word	0x08003ec5
 8003f18:	08003ec5 	.word	0x08003ec5
 8003f1c:	08004079 	.word	0x08004079
 8003f20:	08003ec5 	.word	0x08003ec5
 8003f24:	08003f79 	.word	0x08003f79
 8003f28:	08003ec5 	.word	0x08003ec5
 8003f2c:	08003ec5 	.word	0x08003ec5
 8003f30:	08004041 	.word	0x08004041
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	1d1a      	adds	r2, r3, #4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	602a      	str	r2, [r5, #0]
 8003f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0a4      	b.n	8004092 <_printf_i+0x1f6>
 8003f48:	6820      	ldr	r0, [r4, #0]
 8003f4a:	6829      	ldr	r1, [r5, #0]
 8003f4c:	0606      	lsls	r6, r0, #24
 8003f4e:	f101 0304 	add.w	r3, r1, #4
 8003f52:	d50a      	bpl.n	8003f6a <_printf_i+0xce>
 8003f54:	680e      	ldr	r6, [r1, #0]
 8003f56:	602b      	str	r3, [r5, #0]
 8003f58:	2e00      	cmp	r6, #0
 8003f5a:	da03      	bge.n	8003f64 <_printf_i+0xc8>
 8003f5c:	232d      	movs	r3, #45	; 0x2d
 8003f5e:	4276      	negs	r6, r6
 8003f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f64:	230a      	movs	r3, #10
 8003f66:	485e      	ldr	r0, [pc, #376]	; (80040e0 <_printf_i+0x244>)
 8003f68:	e019      	b.n	8003f9e <_printf_i+0x102>
 8003f6a:	680e      	ldr	r6, [r1, #0]
 8003f6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f70:	602b      	str	r3, [r5, #0]
 8003f72:	bf18      	it	ne
 8003f74:	b236      	sxthne	r6, r6
 8003f76:	e7ef      	b.n	8003f58 <_printf_i+0xbc>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	6820      	ldr	r0, [r4, #0]
 8003f7c:	1d19      	adds	r1, r3, #4
 8003f7e:	6029      	str	r1, [r5, #0]
 8003f80:	0601      	lsls	r1, r0, #24
 8003f82:	d501      	bpl.n	8003f88 <_printf_i+0xec>
 8003f84:	681e      	ldr	r6, [r3, #0]
 8003f86:	e002      	b.n	8003f8e <_printf_i+0xf2>
 8003f88:	0646      	lsls	r6, r0, #25
 8003f8a:	d5fb      	bpl.n	8003f84 <_printf_i+0xe8>
 8003f8c:	881e      	ldrh	r6, [r3, #0]
 8003f8e:	2f6f      	cmp	r7, #111	; 0x6f
 8003f90:	bf0c      	ite	eq
 8003f92:	2308      	moveq	r3, #8
 8003f94:	230a      	movne	r3, #10
 8003f96:	4852      	ldr	r0, [pc, #328]	; (80040e0 <_printf_i+0x244>)
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f9e:	6865      	ldr	r5, [r4, #4]
 8003fa0:	2d00      	cmp	r5, #0
 8003fa2:	bfa8      	it	ge
 8003fa4:	6821      	ldrge	r1, [r4, #0]
 8003fa6:	60a5      	str	r5, [r4, #8]
 8003fa8:	bfa4      	itt	ge
 8003faa:	f021 0104 	bicge.w	r1, r1, #4
 8003fae:	6021      	strge	r1, [r4, #0]
 8003fb0:	b90e      	cbnz	r6, 8003fb6 <_printf_i+0x11a>
 8003fb2:	2d00      	cmp	r5, #0
 8003fb4:	d04d      	beq.n	8004052 <_printf_i+0x1b6>
 8003fb6:	4615      	mov	r5, r2
 8003fb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fbc:	fb03 6711 	mls	r7, r3, r1, r6
 8003fc0:	5dc7      	ldrb	r7, [r0, r7]
 8003fc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fc6:	4637      	mov	r7, r6
 8003fc8:	42bb      	cmp	r3, r7
 8003fca:	460e      	mov	r6, r1
 8003fcc:	d9f4      	bls.n	8003fb8 <_printf_i+0x11c>
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d10b      	bne.n	8003fea <_printf_i+0x14e>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	07de      	lsls	r6, r3, #31
 8003fd6:	d508      	bpl.n	8003fea <_printf_i+0x14e>
 8003fd8:	6923      	ldr	r3, [r4, #16]
 8003fda:	6861      	ldr	r1, [r4, #4]
 8003fdc:	4299      	cmp	r1, r3
 8003fde:	bfde      	ittt	le
 8003fe0:	2330      	movle	r3, #48	; 0x30
 8003fe2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fe6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fea:	1b52      	subs	r2, r2, r5
 8003fec:	6122      	str	r2, [r4, #16]
 8003fee:	464b      	mov	r3, r9
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	4640      	mov	r0, r8
 8003ff4:	f8cd a000 	str.w	sl, [sp]
 8003ff8:	aa03      	add	r2, sp, #12
 8003ffa:	f7ff fedf 	bl	8003dbc <_printf_common>
 8003ffe:	3001      	adds	r0, #1
 8004000:	d14c      	bne.n	800409c <_printf_i+0x200>
 8004002:	f04f 30ff 	mov.w	r0, #4294967295
 8004006:	b004      	add	sp, #16
 8004008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400c:	4834      	ldr	r0, [pc, #208]	; (80040e0 <_printf_i+0x244>)
 800400e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004012:	6829      	ldr	r1, [r5, #0]
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	f851 6b04 	ldr.w	r6, [r1], #4
 800401a:	6029      	str	r1, [r5, #0]
 800401c:	061d      	lsls	r5, r3, #24
 800401e:	d514      	bpl.n	800404a <_printf_i+0x1ae>
 8004020:	07df      	lsls	r7, r3, #31
 8004022:	bf44      	itt	mi
 8004024:	f043 0320 	orrmi.w	r3, r3, #32
 8004028:	6023      	strmi	r3, [r4, #0]
 800402a:	b91e      	cbnz	r6, 8004034 <_printf_i+0x198>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	f023 0320 	bic.w	r3, r3, #32
 8004032:	6023      	str	r3, [r4, #0]
 8004034:	2310      	movs	r3, #16
 8004036:	e7af      	b.n	8003f98 <_printf_i+0xfc>
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	f043 0320 	orr.w	r3, r3, #32
 800403e:	6023      	str	r3, [r4, #0]
 8004040:	2378      	movs	r3, #120	; 0x78
 8004042:	4828      	ldr	r0, [pc, #160]	; (80040e4 <_printf_i+0x248>)
 8004044:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004048:	e7e3      	b.n	8004012 <_printf_i+0x176>
 800404a:	0659      	lsls	r1, r3, #25
 800404c:	bf48      	it	mi
 800404e:	b2b6      	uxthmi	r6, r6
 8004050:	e7e6      	b.n	8004020 <_printf_i+0x184>
 8004052:	4615      	mov	r5, r2
 8004054:	e7bb      	b.n	8003fce <_printf_i+0x132>
 8004056:	682b      	ldr	r3, [r5, #0]
 8004058:	6826      	ldr	r6, [r4, #0]
 800405a:	1d18      	adds	r0, r3, #4
 800405c:	6961      	ldr	r1, [r4, #20]
 800405e:	6028      	str	r0, [r5, #0]
 8004060:	0635      	lsls	r5, r6, #24
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	d501      	bpl.n	800406a <_printf_i+0x1ce>
 8004066:	6019      	str	r1, [r3, #0]
 8004068:	e002      	b.n	8004070 <_printf_i+0x1d4>
 800406a:	0670      	lsls	r0, r6, #25
 800406c:	d5fb      	bpl.n	8004066 <_printf_i+0x1ca>
 800406e:	8019      	strh	r1, [r3, #0]
 8004070:	2300      	movs	r3, #0
 8004072:	4615      	mov	r5, r2
 8004074:	6123      	str	r3, [r4, #16]
 8004076:	e7ba      	b.n	8003fee <_printf_i+0x152>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	2100      	movs	r1, #0
 800407c:	1d1a      	adds	r2, r3, #4
 800407e:	602a      	str	r2, [r5, #0]
 8004080:	681d      	ldr	r5, [r3, #0]
 8004082:	6862      	ldr	r2, [r4, #4]
 8004084:	4628      	mov	r0, r5
 8004086:	f000 f82f 	bl	80040e8 <memchr>
 800408a:	b108      	cbz	r0, 8004090 <_printf_i+0x1f4>
 800408c:	1b40      	subs	r0, r0, r5
 800408e:	6060      	str	r0, [r4, #4]
 8004090:	6863      	ldr	r3, [r4, #4]
 8004092:	6123      	str	r3, [r4, #16]
 8004094:	2300      	movs	r3, #0
 8004096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800409a:	e7a8      	b.n	8003fee <_printf_i+0x152>
 800409c:	462a      	mov	r2, r5
 800409e:	4649      	mov	r1, r9
 80040a0:	4640      	mov	r0, r8
 80040a2:	6923      	ldr	r3, [r4, #16]
 80040a4:	47d0      	blx	sl
 80040a6:	3001      	adds	r0, #1
 80040a8:	d0ab      	beq.n	8004002 <_printf_i+0x166>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	079b      	lsls	r3, r3, #30
 80040ae:	d413      	bmi.n	80040d8 <_printf_i+0x23c>
 80040b0:	68e0      	ldr	r0, [r4, #12]
 80040b2:	9b03      	ldr	r3, [sp, #12]
 80040b4:	4298      	cmp	r0, r3
 80040b6:	bfb8      	it	lt
 80040b8:	4618      	movlt	r0, r3
 80040ba:	e7a4      	b.n	8004006 <_printf_i+0x16a>
 80040bc:	2301      	movs	r3, #1
 80040be:	4632      	mov	r2, r6
 80040c0:	4649      	mov	r1, r9
 80040c2:	4640      	mov	r0, r8
 80040c4:	47d0      	blx	sl
 80040c6:	3001      	adds	r0, #1
 80040c8:	d09b      	beq.n	8004002 <_printf_i+0x166>
 80040ca:	3501      	adds	r5, #1
 80040cc:	68e3      	ldr	r3, [r4, #12]
 80040ce:	9903      	ldr	r1, [sp, #12]
 80040d0:	1a5b      	subs	r3, r3, r1
 80040d2:	42ab      	cmp	r3, r5
 80040d4:	dcf2      	bgt.n	80040bc <_printf_i+0x220>
 80040d6:	e7eb      	b.n	80040b0 <_printf_i+0x214>
 80040d8:	2500      	movs	r5, #0
 80040da:	f104 0619 	add.w	r6, r4, #25
 80040de:	e7f5      	b.n	80040cc <_printf_i+0x230>
 80040e0:	08004437 	.word	0x08004437
 80040e4:	08004448 	.word	0x08004448

080040e8 <memchr>:
 80040e8:	4603      	mov	r3, r0
 80040ea:	b510      	push	{r4, lr}
 80040ec:	b2c9      	uxtb	r1, r1
 80040ee:	4402      	add	r2, r0
 80040f0:	4293      	cmp	r3, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	d101      	bne.n	80040fa <memchr+0x12>
 80040f6:	2000      	movs	r0, #0
 80040f8:	e003      	b.n	8004102 <memchr+0x1a>
 80040fa:	7804      	ldrb	r4, [r0, #0]
 80040fc:	3301      	adds	r3, #1
 80040fe:	428c      	cmp	r4, r1
 8004100:	d1f6      	bne.n	80040f0 <memchr+0x8>
 8004102:	bd10      	pop	{r4, pc}

08004104 <memcpy>:
 8004104:	440a      	add	r2, r1
 8004106:	4291      	cmp	r1, r2
 8004108:	f100 33ff 	add.w	r3, r0, #4294967295
 800410c:	d100      	bne.n	8004110 <memcpy+0xc>
 800410e:	4770      	bx	lr
 8004110:	b510      	push	{r4, lr}
 8004112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004116:	4291      	cmp	r1, r2
 8004118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800411c:	d1f9      	bne.n	8004112 <memcpy+0xe>
 800411e:	bd10      	pop	{r4, pc}

08004120 <memmove>:
 8004120:	4288      	cmp	r0, r1
 8004122:	b510      	push	{r4, lr}
 8004124:	eb01 0402 	add.w	r4, r1, r2
 8004128:	d902      	bls.n	8004130 <memmove+0x10>
 800412a:	4284      	cmp	r4, r0
 800412c:	4623      	mov	r3, r4
 800412e:	d807      	bhi.n	8004140 <memmove+0x20>
 8004130:	1e43      	subs	r3, r0, #1
 8004132:	42a1      	cmp	r1, r4
 8004134:	d008      	beq.n	8004148 <memmove+0x28>
 8004136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800413a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800413e:	e7f8      	b.n	8004132 <memmove+0x12>
 8004140:	4601      	mov	r1, r0
 8004142:	4402      	add	r2, r0
 8004144:	428a      	cmp	r2, r1
 8004146:	d100      	bne.n	800414a <memmove+0x2a>
 8004148:	bd10      	pop	{r4, pc}
 800414a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800414e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004152:	e7f7      	b.n	8004144 <memmove+0x24>

08004154 <_free_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	4605      	mov	r5, r0
 8004158:	2900      	cmp	r1, #0
 800415a:	d040      	beq.n	80041de <_free_r+0x8a>
 800415c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004160:	1f0c      	subs	r4, r1, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	bfb8      	it	lt
 8004166:	18e4      	addlt	r4, r4, r3
 8004168:	f000 f910 	bl	800438c <__malloc_lock>
 800416c:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <_free_r+0x8c>)
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	b933      	cbnz	r3, 8004180 <_free_r+0x2c>
 8004172:	6063      	str	r3, [r4, #4]
 8004174:	6014      	str	r4, [r2, #0]
 8004176:	4628      	mov	r0, r5
 8004178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800417c:	f000 b90c 	b.w	8004398 <__malloc_unlock>
 8004180:	42a3      	cmp	r3, r4
 8004182:	d908      	bls.n	8004196 <_free_r+0x42>
 8004184:	6820      	ldr	r0, [r4, #0]
 8004186:	1821      	adds	r1, r4, r0
 8004188:	428b      	cmp	r3, r1
 800418a:	bf01      	itttt	eq
 800418c:	6819      	ldreq	r1, [r3, #0]
 800418e:	685b      	ldreq	r3, [r3, #4]
 8004190:	1809      	addeq	r1, r1, r0
 8004192:	6021      	streq	r1, [r4, #0]
 8004194:	e7ed      	b.n	8004172 <_free_r+0x1e>
 8004196:	461a      	mov	r2, r3
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	b10b      	cbz	r3, 80041a0 <_free_r+0x4c>
 800419c:	42a3      	cmp	r3, r4
 800419e:	d9fa      	bls.n	8004196 <_free_r+0x42>
 80041a0:	6811      	ldr	r1, [r2, #0]
 80041a2:	1850      	adds	r0, r2, r1
 80041a4:	42a0      	cmp	r0, r4
 80041a6:	d10b      	bne.n	80041c0 <_free_r+0x6c>
 80041a8:	6820      	ldr	r0, [r4, #0]
 80041aa:	4401      	add	r1, r0
 80041ac:	1850      	adds	r0, r2, r1
 80041ae:	4283      	cmp	r3, r0
 80041b0:	6011      	str	r1, [r2, #0]
 80041b2:	d1e0      	bne.n	8004176 <_free_r+0x22>
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4401      	add	r1, r0
 80041ba:	6011      	str	r1, [r2, #0]
 80041bc:	6053      	str	r3, [r2, #4]
 80041be:	e7da      	b.n	8004176 <_free_r+0x22>
 80041c0:	d902      	bls.n	80041c8 <_free_r+0x74>
 80041c2:	230c      	movs	r3, #12
 80041c4:	602b      	str	r3, [r5, #0]
 80041c6:	e7d6      	b.n	8004176 <_free_r+0x22>
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	1821      	adds	r1, r4, r0
 80041cc:	428b      	cmp	r3, r1
 80041ce:	bf01      	itttt	eq
 80041d0:	6819      	ldreq	r1, [r3, #0]
 80041d2:	685b      	ldreq	r3, [r3, #4]
 80041d4:	1809      	addeq	r1, r1, r0
 80041d6:	6021      	streq	r1, [r4, #0]
 80041d8:	6063      	str	r3, [r4, #4]
 80041da:	6054      	str	r4, [r2, #4]
 80041dc:	e7cb      	b.n	8004176 <_free_r+0x22>
 80041de:	bd38      	pop	{r3, r4, r5, pc}
 80041e0:	20000154 	.word	0x20000154

080041e4 <sbrk_aligned>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	4e0e      	ldr	r6, [pc, #56]	; (8004220 <sbrk_aligned+0x3c>)
 80041e8:	460c      	mov	r4, r1
 80041ea:	6831      	ldr	r1, [r6, #0]
 80041ec:	4605      	mov	r5, r0
 80041ee:	b911      	cbnz	r1, 80041f6 <sbrk_aligned+0x12>
 80041f0:	f000 f8bc 	bl	800436c <_sbrk_r>
 80041f4:	6030      	str	r0, [r6, #0]
 80041f6:	4621      	mov	r1, r4
 80041f8:	4628      	mov	r0, r5
 80041fa:	f000 f8b7 	bl	800436c <_sbrk_r>
 80041fe:	1c43      	adds	r3, r0, #1
 8004200:	d00a      	beq.n	8004218 <sbrk_aligned+0x34>
 8004202:	1cc4      	adds	r4, r0, #3
 8004204:	f024 0403 	bic.w	r4, r4, #3
 8004208:	42a0      	cmp	r0, r4
 800420a:	d007      	beq.n	800421c <sbrk_aligned+0x38>
 800420c:	1a21      	subs	r1, r4, r0
 800420e:	4628      	mov	r0, r5
 8004210:	f000 f8ac 	bl	800436c <_sbrk_r>
 8004214:	3001      	adds	r0, #1
 8004216:	d101      	bne.n	800421c <sbrk_aligned+0x38>
 8004218:	f04f 34ff 	mov.w	r4, #4294967295
 800421c:	4620      	mov	r0, r4
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	20000158 	.word	0x20000158

08004224 <_malloc_r>:
 8004224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004228:	1ccd      	adds	r5, r1, #3
 800422a:	f025 0503 	bic.w	r5, r5, #3
 800422e:	3508      	adds	r5, #8
 8004230:	2d0c      	cmp	r5, #12
 8004232:	bf38      	it	cc
 8004234:	250c      	movcc	r5, #12
 8004236:	2d00      	cmp	r5, #0
 8004238:	4607      	mov	r7, r0
 800423a:	db01      	blt.n	8004240 <_malloc_r+0x1c>
 800423c:	42a9      	cmp	r1, r5
 800423e:	d905      	bls.n	800424c <_malloc_r+0x28>
 8004240:	230c      	movs	r3, #12
 8004242:	2600      	movs	r6, #0
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4630      	mov	r0, r6
 8004248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800424c:	4e2e      	ldr	r6, [pc, #184]	; (8004308 <_malloc_r+0xe4>)
 800424e:	f000 f89d 	bl	800438c <__malloc_lock>
 8004252:	6833      	ldr	r3, [r6, #0]
 8004254:	461c      	mov	r4, r3
 8004256:	bb34      	cbnz	r4, 80042a6 <_malloc_r+0x82>
 8004258:	4629      	mov	r1, r5
 800425a:	4638      	mov	r0, r7
 800425c:	f7ff ffc2 	bl	80041e4 <sbrk_aligned>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	4604      	mov	r4, r0
 8004264:	d14d      	bne.n	8004302 <_malloc_r+0xde>
 8004266:	6834      	ldr	r4, [r6, #0]
 8004268:	4626      	mov	r6, r4
 800426a:	2e00      	cmp	r6, #0
 800426c:	d140      	bne.n	80042f0 <_malloc_r+0xcc>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	4631      	mov	r1, r6
 8004272:	4638      	mov	r0, r7
 8004274:	eb04 0803 	add.w	r8, r4, r3
 8004278:	f000 f878 	bl	800436c <_sbrk_r>
 800427c:	4580      	cmp	r8, r0
 800427e:	d13a      	bne.n	80042f6 <_malloc_r+0xd2>
 8004280:	6821      	ldr	r1, [r4, #0]
 8004282:	3503      	adds	r5, #3
 8004284:	1a6d      	subs	r5, r5, r1
 8004286:	f025 0503 	bic.w	r5, r5, #3
 800428a:	3508      	adds	r5, #8
 800428c:	2d0c      	cmp	r5, #12
 800428e:	bf38      	it	cc
 8004290:	250c      	movcc	r5, #12
 8004292:	4638      	mov	r0, r7
 8004294:	4629      	mov	r1, r5
 8004296:	f7ff ffa5 	bl	80041e4 <sbrk_aligned>
 800429a:	3001      	adds	r0, #1
 800429c:	d02b      	beq.n	80042f6 <_malloc_r+0xd2>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	442b      	add	r3, r5
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	e00e      	b.n	80042c4 <_malloc_r+0xa0>
 80042a6:	6822      	ldr	r2, [r4, #0]
 80042a8:	1b52      	subs	r2, r2, r5
 80042aa:	d41e      	bmi.n	80042ea <_malloc_r+0xc6>
 80042ac:	2a0b      	cmp	r2, #11
 80042ae:	d916      	bls.n	80042de <_malloc_r+0xba>
 80042b0:	1961      	adds	r1, r4, r5
 80042b2:	42a3      	cmp	r3, r4
 80042b4:	6025      	str	r5, [r4, #0]
 80042b6:	bf18      	it	ne
 80042b8:	6059      	strne	r1, [r3, #4]
 80042ba:	6863      	ldr	r3, [r4, #4]
 80042bc:	bf08      	it	eq
 80042be:	6031      	streq	r1, [r6, #0]
 80042c0:	5162      	str	r2, [r4, r5]
 80042c2:	604b      	str	r3, [r1, #4]
 80042c4:	4638      	mov	r0, r7
 80042c6:	f104 060b 	add.w	r6, r4, #11
 80042ca:	f000 f865 	bl	8004398 <__malloc_unlock>
 80042ce:	f026 0607 	bic.w	r6, r6, #7
 80042d2:	1d23      	adds	r3, r4, #4
 80042d4:	1af2      	subs	r2, r6, r3
 80042d6:	d0b6      	beq.n	8004246 <_malloc_r+0x22>
 80042d8:	1b9b      	subs	r3, r3, r6
 80042da:	50a3      	str	r3, [r4, r2]
 80042dc:	e7b3      	b.n	8004246 <_malloc_r+0x22>
 80042de:	6862      	ldr	r2, [r4, #4]
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	bf0c      	ite	eq
 80042e4:	6032      	streq	r2, [r6, #0]
 80042e6:	605a      	strne	r2, [r3, #4]
 80042e8:	e7ec      	b.n	80042c4 <_malloc_r+0xa0>
 80042ea:	4623      	mov	r3, r4
 80042ec:	6864      	ldr	r4, [r4, #4]
 80042ee:	e7b2      	b.n	8004256 <_malloc_r+0x32>
 80042f0:	4634      	mov	r4, r6
 80042f2:	6876      	ldr	r6, [r6, #4]
 80042f4:	e7b9      	b.n	800426a <_malloc_r+0x46>
 80042f6:	230c      	movs	r3, #12
 80042f8:	4638      	mov	r0, r7
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	f000 f84c 	bl	8004398 <__malloc_unlock>
 8004300:	e7a1      	b.n	8004246 <_malloc_r+0x22>
 8004302:	6025      	str	r5, [r4, #0]
 8004304:	e7de      	b.n	80042c4 <_malloc_r+0xa0>
 8004306:	bf00      	nop
 8004308:	20000154 	.word	0x20000154

0800430c <_realloc_r>:
 800430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004310:	4680      	mov	r8, r0
 8004312:	4614      	mov	r4, r2
 8004314:	460e      	mov	r6, r1
 8004316:	b921      	cbnz	r1, 8004322 <_realloc_r+0x16>
 8004318:	4611      	mov	r1, r2
 800431a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800431e:	f7ff bf81 	b.w	8004224 <_malloc_r>
 8004322:	b92a      	cbnz	r2, 8004330 <_realloc_r+0x24>
 8004324:	f7ff ff16 	bl	8004154 <_free_r>
 8004328:	4625      	mov	r5, r4
 800432a:	4628      	mov	r0, r5
 800432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004330:	f000 f838 	bl	80043a4 <_malloc_usable_size_r>
 8004334:	4284      	cmp	r4, r0
 8004336:	4607      	mov	r7, r0
 8004338:	d802      	bhi.n	8004340 <_realloc_r+0x34>
 800433a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800433e:	d812      	bhi.n	8004366 <_realloc_r+0x5a>
 8004340:	4621      	mov	r1, r4
 8004342:	4640      	mov	r0, r8
 8004344:	f7ff ff6e 	bl	8004224 <_malloc_r>
 8004348:	4605      	mov	r5, r0
 800434a:	2800      	cmp	r0, #0
 800434c:	d0ed      	beq.n	800432a <_realloc_r+0x1e>
 800434e:	42bc      	cmp	r4, r7
 8004350:	4622      	mov	r2, r4
 8004352:	4631      	mov	r1, r6
 8004354:	bf28      	it	cs
 8004356:	463a      	movcs	r2, r7
 8004358:	f7ff fed4 	bl	8004104 <memcpy>
 800435c:	4631      	mov	r1, r6
 800435e:	4640      	mov	r0, r8
 8004360:	f7ff fef8 	bl	8004154 <_free_r>
 8004364:	e7e1      	b.n	800432a <_realloc_r+0x1e>
 8004366:	4635      	mov	r5, r6
 8004368:	e7df      	b.n	800432a <_realloc_r+0x1e>
	...

0800436c <_sbrk_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	2300      	movs	r3, #0
 8004370:	4d05      	ldr	r5, [pc, #20]	; (8004388 <_sbrk_r+0x1c>)
 8004372:	4604      	mov	r4, r0
 8004374:	4608      	mov	r0, r1
 8004376:	602b      	str	r3, [r5, #0]
 8004378:	f7fc ffc2 	bl	8001300 <_sbrk>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d102      	bne.n	8004386 <_sbrk_r+0x1a>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	b103      	cbz	r3, 8004386 <_sbrk_r+0x1a>
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	2000015c 	.word	0x2000015c

0800438c <__malloc_lock>:
 800438c:	4801      	ldr	r0, [pc, #4]	; (8004394 <__malloc_lock+0x8>)
 800438e:	f000 b811 	b.w	80043b4 <__retarget_lock_acquire_recursive>
 8004392:	bf00      	nop
 8004394:	20000160 	.word	0x20000160

08004398 <__malloc_unlock>:
 8004398:	4801      	ldr	r0, [pc, #4]	; (80043a0 <__malloc_unlock+0x8>)
 800439a:	f000 b80c 	b.w	80043b6 <__retarget_lock_release_recursive>
 800439e:	bf00      	nop
 80043a0:	20000160 	.word	0x20000160

080043a4 <_malloc_usable_size_r>:
 80043a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043a8:	1f18      	subs	r0, r3, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bfbc      	itt	lt
 80043ae:	580b      	ldrlt	r3, [r1, r0]
 80043b0:	18c0      	addlt	r0, r0, r3
 80043b2:	4770      	bx	lr

080043b4 <__retarget_lock_acquire_recursive>:
 80043b4:	4770      	bx	lr

080043b6 <__retarget_lock_release_recursive>:
 80043b6:	4770      	bx	lr

080043b8 <_init>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	bf00      	nop
 80043bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043be:	bc08      	pop	{r3}
 80043c0:	469e      	mov	lr, r3
 80043c2:	4770      	bx	lr

080043c4 <_fini>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr
